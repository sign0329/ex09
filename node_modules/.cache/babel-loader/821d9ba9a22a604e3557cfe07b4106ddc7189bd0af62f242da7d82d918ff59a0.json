{"ast":null,"code":"import e, { useLayoutEffect as o, useEffect as t, useState as n, useRef as a, useImperativeHandle as r, useContext as i, useMemo as s } from \"react\";\nimport l from \"react-dom\";\nfunction d() {\n  return d = Object.assign || function (e) {\n    for (var o = 1; o < arguments.length; o++) {\n      var t = arguments[o];\n      for (var n in t) Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);\n    }\n    return e;\n  }, d.apply(this, arguments);\n}\nfunction c(e, o) {\n  if (null == e) return {};\n  var t,\n    n,\n    a = {},\n    r = Object.keys(e);\n  for (n = 0; n < r.length; n++) o.indexOf(t = r[n]) >= 0 || (a[t] = e[t]);\n  return a;\n}\nconst p = \"undefined\" != typeof window && \"undefined\" != typeof document ? o : t,\n  k = (e, o, t) => {\n    p(() => {\n      if (!e || !t) return;\n      const n = function () {\n        for (var _len = arguments.length, o = new Array(_len), _key = 0; _key < _len; _key++) {\n          o[_key] = arguments[_key];\n        }\n        return void 0 === o ? t(e) : t(e, ...o);\n      };\n      return kakao.maps.event.addListener(e, o, n), () => {\n        kakao.maps.event.removeListener(e, o, n);\n      };\n    }, [e, o, t]);\n  };\nvar u;\n!function (e) {\n  e[e.INITIALIZED = 0] = \"INITIALIZED\", e[e.LOADING = 1] = \"LOADING\", e[e.SUCCESS = 2] = \"SUCCESS\", e[e.FAILURE = 3] = \"FAILURE\";\n}(u || (u = {}));\nclass m {\n  constructor(_ref) {\n    let {\n      appkey: e,\n      id: o = \"__reactKakaoMapsSdkloaderId\",\n      libraries: t = [],\n      nonce: n,\n      retries: a = 3,\n      url: r = \"//dapi.kakao.com/v2/maps/sdk.js\"\n    } = _ref;\n    if (this.id = void 0, this.appkey = void 0, this.url = void 0, this.libraries = void 0, this.nonce = void 0, this.retries = void 0, this.callbacks = [], this.done = !1, this.loading = !1, this.errors = [], this.onerrorEvent = void 0, this.id = o, this.appkey = e, this.libraries = t, this.nonce = n, this.retries = a, this.url = r, m.instance) {\n      if (!m.equalOptions(this.options, m.instance.options)) throw new Error(`Loader must not be called again with different options. ${JSON.stringify(this.options)} !== ${JSON.stringify(m.instance.options)}`);\n      return m.instance;\n    }\n    m.instance = this;\n  }\n  get options() {\n    return {\n      appkey: this.appkey,\n      id: this.id,\n      libraries: this.libraries,\n      nonce: this.nonce,\n      retries: this.retries,\n      url: this.url\n    };\n  }\n  static isLoaded() {\n    return new Promise(e => m.instance ? m.instance.status === u.FAILURE || m.instance.status === u.INITIALIZED ? e(!1) : (m.instance.status === u.LOADING && m.loadcheckcallbacks.push(o => e(!o)), e(!0)) : window.kakao && window.kakao.maps ? window.kakao.maps.load(() => {\n      e(!0);\n    }) : m.loadcheckcallbacks.push(o => {\n      e(!o);\n    }));\n  }\n  load() {\n    return new Promise((e, o) => {\n      this.loadCallback(t => {\n        t ? o(t.error) : e(window.kakao);\n      });\n    });\n  }\n  get status() {\n    return this.onerrorEvent ? u.FAILURE : this.done ? u.SUCCESS : this.loading ? u.LOADING : u.INITIALIZED;\n  }\n  get failed() {\n    return this.done && !this.loading && this.errors.length >= this.retries + 1;\n  }\n  loadCallback(e) {\n    this.callbacks.push(e), this.execute();\n  }\n  resetIfRetryingFailed() {\n    this.failed && this.reset();\n  }\n  reset() {\n    this.deleteScript(), this.done = !1, this.loading = !1, this.errors = [], this.onerrorEvent = void 0;\n  }\n  execute() {\n    if (this.resetIfRetryingFailed(), this.done) this.callback();else {\n      if (window.kakao && window.kakao.maps) return console.warn(\"Kakao Maps이 이미 외부 요소에 의해 로딩되어 있습니다.설정한 옵션과 일치 하지 않을 수 있으며, 이에 따른 예상치 동작이 발생할 수 있습니다.\"), void window.kakao.maps.load(this.callback);\n      this.loading || (this.loading = !0, this.setScript());\n    }\n  }\n  setScript() {\n    document.getElementById(this.id) && this.callback();\n    const e = this.createUrl(),\n      o = document.createElement(\"script\");\n    o.id = this.id, o.type = \"text/javascript\", o.src = e, o.onerror = this.loadErrorCallback.bind(this), o.onload = this.callback.bind(this), o.defer = !0, o.async = !0, this.nonce && (o.nonce = this.nonce), document.head.appendChild(o);\n  }\n  loadErrorCallback(e, o, t, n, a) {\n    if (this.errors.push({\n      event: e,\n      source: o,\n      lineno: t,\n      colno: n,\n      error: a\n    }), this.errors.length <= this.retries) {\n      const e = this.errors.length * 2 ** this.errors.length;\n      console.log(`Failed to load Kakao Maps script, retrying in ${e} ms.`), setTimeout(() => {\n        this.deleteScript(), this.setScript();\n      }, e);\n    } else this.onerrorEvent = this.errors[this.errors.length - 1], this.callback();\n  }\n  createUrl() {\n    let e = this.url;\n    return e += `?appkey=${this.appkey}`, this.libraries.length && (e += `&libraries=${this.libraries.join(\",\")}`), e += \"&autoload=false\", e;\n  }\n  deleteScript() {\n    const e = document.getElementById(this.id);\n    e && e.remove();\n  }\n  callback() {\n    kakao.maps.load(() => {\n      this.done = !0, this.loading = !1, this.callbacks.forEach(e => {\n        e(this.onerrorEvent);\n      }), this.callbacks = [], m.loadcheckcallbacks.forEach(e => {\n        e(this.onerrorEvent);\n      }), m.loadcheckcallbacks = [];\n    });\n  }\n  static equalOptions(e, o) {\n    if (e.appkey !== o.appkey) return !1;\n    if (e.id !== o.id) return !1;\n    if (e.libraries.length !== o.libraries.length) return !1;\n    for (let t = 0; t < e.libraries.length; ++t) if (e.libraries[t] !== o.libraries[t]) return !1;\n    return e.nonce === o.nonce && e.retries === o.retries && e.url === o.url;\n  }\n}\nm.instance = void 0, m.loadcheckcallbacks = [];\nconst g = [\"id\", \"as\", \"children\", \"center\", \"isPanto\", \"padding\", \"disableDoubleClick\", \"disableDoubleClickZoom\", \"draggable\", \"zoomable\", \"keyboardShortcuts\", \"level\", \"maxLevel\", \"minLevel\", \"mapTypeId\", \"projectionId\", \"scrollwheel\", \"tileAnimation\", \"onBoundsChanged\", \"onCenterChanged\", \"onClick\", \"onDoubleClick\", \"onDrag\", \"onDragEnd\", \"onDragStart\", \"onIdle\", \"onMaptypeidChanged\", \"onMouseMove\", \"onRightClick\", \"onTileLoaded\", \"onZoomChanged\", \"onZoomStart\", \"onCreate\"],\n  h = e.createContext(void 0),\n  w = e.forwardRef((o, t) => {\n    let {\n        id: i,\n        as: s,\n        children: l,\n        center: u,\n        isPanto: w = !1,\n        padding: v = 32,\n        disableDoubleClick: f,\n        disableDoubleClickZoom: C,\n        draggable: y,\n        zoomable: b,\n        keyboardShortcuts: I,\n        level: M,\n        maxLevel: L,\n        minLevel: O,\n        mapTypeId: x,\n        projectionId: S,\n        scrollwheel: z,\n        tileAnimation: E,\n        onBoundsChanged: P,\n        onCenterChanged: R,\n        onClick: A,\n        onDoubleClick: D,\n        onDrag: T,\n        onDragEnd: Z,\n        onDragStart: W,\n        onIdle: N,\n        onMaptypeidChanged: j,\n        onMouseMove: _,\n        onRightClick: F,\n        onTileLoaded: G,\n        onZoomChanged: U,\n        onZoomStart: V,\n        onCreate: B\n      } = o,\n      $ = c(o, g);\n    const q = s || \"div\",\n      [H, J] = n(!1),\n      [K, X] = n(),\n      Y = a(null);\n    return p(() => {\n      m.isLoaded().then(J);\n    }, []), p(() => {\n      if (!H) return;\n      const e = Y.current;\n      if (!e) return;\n      const o = \"lat\" in u ? new kakao.maps.LatLng(u.lat, u.lng) : new kakao.maps.Coords(u.x, u.y),\n        t = new kakao.maps.Map(e, {\n          center: o,\n          disableDoubleClick: f,\n          disableDoubleClickZoom: C,\n          draggable: y,\n          keyboardShortcuts: I,\n          level: M,\n          mapTypeId: x,\n          projectionId: S,\n          scrollwheel: z,\n          tileAnimation: E\n        });\n      return X(t), () => {\n        e.innerHTML = \"\";\n      };\n    }, [H, f, C, x, E]), r(t, () => K, [K]), p(() => {\n      K && B && B(K);\n    }, [K, B]), p(() => {\n      if (!K) return;\n      let e = K.getCenter();\n      e instanceof kakao.maps.Coords && (e = e.toLatLng());\n      const o = \"lat\" in u ? new kakao.maps.LatLng(u.lat, u.lng) : new kakao.maps.Coords(u.x, u.y);\n      o instanceof kakao.maps.LatLng && o.equals(e) || o instanceof kakao.maps.Coords && o.toLatLng().equals(e) || (w ? K.panTo(o, v) : K.setCenter(o));\n    }, [K, u.lat, u.lng, u.x, u.y]), p(() => {\n      K && void 0 !== y && K.setDraggable(y);\n    }, [K, y]), p(() => {\n      K && void 0 !== b && K.setZoomable(b);\n    }, [K, b]), p(() => {\n      K && I && \"boolean\" == typeof I && K.setKeyboardShortcuts(I);\n    }, [K, I]), p(() => {\n      K && M && K.setLevel(M);\n    }, [K, M]), p(() => {\n      K && x && K.setMapTypeId(x);\n    }, [K, x]), p(() => {\n      K && S && K.setProjectionId(S);\n    }, [K, S]), p(() => {\n      K && L && K.setMaxLevel(L);\n    }, [K, L]), p(() => {\n      K && O && K.setMinLevel(O);\n    }, [K, O]), k(K, \"bounds_changed\", P), k(K, \"center_changed\", R), k(K, \"click\", A), k(K, \"dblclick\", D), k(K, \"drag\", T), k(K, \"dragstart\", W), k(K, \"dragend\", Z), k(K, \"idle\", N), k(K, \"maptypeid_changed\", j), k(K, \"mousemove\", _), k(K, \"rightclick\", F), k(K, \"tilesloaded\", G), k(K, \"zoom_changed\", U), k(K, \"zoom_start\", V), e.createElement(e.Fragment, null, e.createElement(q, d({\n      id: i || \"react-kakao-maps-sdk-map-container\"\n    }, $, {\n      ref: Y\n    })), K && e.createElement(h.Provider, {\n      value: K\n    }, l));\n  }),\n  v = e => {\n    const o = i(h);\n    if (!o) throw new Error((e ? e + \" Component\" : \"useMap\") + \" must exist inside Map Component!\");\n    return o;\n  },\n  f = e.forwardRef((_ref2, g) => {\n    let {\n      map: e,\n      position: t,\n      marker: n,\n      children: i,\n      altitude: d,\n      disableAutoPan: c,\n      range: p,\n      removable: k,\n      zIndex: u,\n      onCreate: m\n    } = _ref2;\n    const h = a(document.createElement(\"div\")),\n      w = s(() => {\n        const e = new kakao.maps.InfoWindow({\n          altitude: d,\n          disableAutoPan: c,\n          range: p,\n          removable: k,\n          zIndex: u,\n          content: h.current,\n          position: t\n        });\n        return h.current.style.display = \"none\", e;\n      }, [c, k]);\n    return r(g, () => w, [w]), o(() => (w.open(e, n), () => {\n      w.close();\n    }), [e, n]), o(() => {\n      m && m(w);\n    }, [w, m]), o(() => {\n      w && w.setPosition(t);\n    }, [w, t]), o(() => {\n      w && d && w.setAltitude(d);\n    }, [w, d]), o(() => {\n      w && p && w.setRange(p);\n    }, [w, p]), o(() => {\n      w && u && w.setZIndex(u);\n    }, [w, u]), h.current.parentElement && l.createPortal(i, h.current.parentElement);\n  }),\n  C = e.createContext(void 0),\n  y = e.forwardRef((_ref3, L) => {\n    let {\n      children: t,\n      averageCenter: n,\n      calculator: a,\n      clickable: i,\n      disableClickZoom: l,\n      gridSize: d,\n      hoverable: c,\n      minClusterSize: p,\n      minLevel: u,\n      styles: m,\n      texts: g,\n      onClusterclick: h,\n      onClusterdblclick: w,\n      onClustered: f,\n      onClusterout: y,\n      onClusterover: b,\n      onClusterrightclick: I,\n      onCreate: M\n    } = _ref3;\n    const O = v(\"MarkerClusterer\"),\n      x = s(() => {\n        if (window.kakao.maps.MarkerClusterer) return new kakao.maps.MarkerClusterer({\n          averageCenter: n,\n          calculator: a,\n          clickable: i,\n          disableClickZoom: l,\n          gridSize: d,\n          hoverable: c,\n          minClusterSize: p,\n          minLevel: u,\n          styles: m,\n          texts: g\n        });\n        console.warn(\"clusterer 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\");\n      }, []);\n    return r(L, () => x, [x]), o(() => {\n      null == x || x.setMap(O);\n    }, [O, x]), o(() => {\n      x && M && M(x);\n    }, [x, M]), o(() => {\n      x && d && (x.setGridSize(d), x.redraw());\n    }, [x, d]), o(() => {\n      x && p && (x.setMinClusterSize(p), x.redraw());\n    }, [x, p]), o(() => {\n      x && void 0 !== n && (x.setAverageCenter(n), x.redraw());\n    }, [x, n]), o(() => {\n      x && u && (x.setMinLevel(u), x.redraw());\n    }, [x, u]), o(() => {\n      x && g && (x.setTexts(g), x.redraw());\n    }, [x, g]), o(() => {\n      x && a && (x.setCalculator(a), x.redraw());\n    }, [x, a]), o(() => {\n      x && m && (x.setStyles(m), x.redraw());\n    }, [x, m]), k(x, \"clusterclick\", h), k(x, \"clusterover\", b), k(x, \"clusterout\", y), k(x, \"clusterdblclick\", w), k(x, \"clusterrightclick\", I), k(x, \"clustered\", f), x ? e.createElement(C.Provider, {\n      value: x\n    }, t) : null;\n  }),\n  b = e.forwardRef((_ref4, O) => {\n    let {\n      map: t,\n      position: n,\n      children: a,\n      altitude: l,\n      clickable: d,\n      draggable: c,\n      image: p,\n      infoWindowOptions: u,\n      onCreate: m,\n      onClick: g,\n      onDragEnd: h,\n      onDragStart: w,\n      onMouseOut: v,\n      onMouseOver: y,\n      opacity: b,\n      range: I,\n      title: M,\n      zIndex: L\n    } = _ref4;\n    const x = i(C),\n      S = s(() => new kakao.maps.Marker({\n        altitude: l,\n        clickable: d,\n        draggable: c,\n        image: p,\n        opacity: b,\n        range: I,\n        title: M,\n        zIndex: L,\n        position: n\n      }), []);\n    return r(O, () => S, [S]), o(() => (x ? x.addMarker(S) : S.setMap(t), () => {\n      x ? x.removeMarker(S) : S.setMap(null);\n    }), [t, x, S]), o(() => {\n      m && m(S);\n    }, [S, m]), k(S, \"click\", g), k(S, \"dragstart\", w), k(S, \"dragend\", h), k(S, \"mouseout\", v), k(S, \"mouseover\", y), o(() => {\n      t && S && n && S.setPosition(n);\n    }, [t, S, n]), o(() => {\n      t && S && p && S.setImage(p);\n    }, [t, S, p]), o(() => {\n      t && S && l && S.setAltitude(l);\n    }, [t, S, l]), o(() => {\n      t && S && void 0 !== d && S.setClickable(d);\n    }, [t, S, d]), o(() => {\n      t && S && void 0 !== c && S.setDraggable(c);\n    }, [t, S, c]), o(() => {\n      t && S && b && S.setOpacity(b);\n    }, [t, S, b]), o(() => {\n      t && S && I && S.setRange(I);\n    }, [t, S, I]), o(() => {\n      t && S && M && S.setTitle(M);\n    }, [t, S, M]), o(() => {\n      t && S && L && S.setZIndex(L);\n    }, [t, S, L]), a ? e.createElement(f, {\n      position: n,\n      map: t,\n      marker: S,\n      altitude: null == u ? void 0 : u.altitude,\n      disableAutoPan: null == u ? void 0 : u.disableAutoPan,\n      range: null == u ? void 0 : u.range,\n      removable: null == u ? void 0 : u.removable,\n      zIndex: null == u ? void 0 : u.zIndex\n    }, a) : null;\n  }),\n  I = e.forwardRef((_ref5, w) => {\n    let {\n      image: o,\n      position: t,\n      children: n,\n      clickable: a,\n      draggable: r,\n      infoWindowOptions: i,\n      onClick: l,\n      onDragEnd: d,\n      onDragStart: c,\n      onMouseOut: p,\n      onMouseOver: k,\n      onCreate: u,\n      opacity: m,\n      title: g,\n      zIndex: h\n    } = _ref5;\n    const f = v(\"MapMarker\"),\n      C = s(() => {\n        var e, t, n, a, r, i, s, l, d, c, p, k;\n        return o && new kakao.maps.MarkerImage(o.src, new kakao.maps.Size(o.size.width, o.size.height), {\n          alt: null == (e = o.options) ? void 0 : e.alt,\n          coords: null == (t = o.options) ? void 0 : t.coords,\n          offset: (null == (n = o.options) ? void 0 : n.offset) && new kakao.maps.Point(null == (a = o.options) ? void 0 : a.offset.x, null == (r = o.options) ? void 0 : r.offset.y),\n          shape: null == (i = o.options) ? void 0 : i.shape,\n          spriteOrigin: (null == (s = o.options) ? void 0 : s.spriteOrigin) && new kakao.maps.Point(null == (l = o.options) ? void 0 : l.spriteOrigin.x, null == (d = o.options) ? void 0 : d.spriteOrigin.y),\n          spriteSize: (null == (c = o.options) ? void 0 : c.spriteSize) && new kakao.maps.Size(null == (p = o.options) ? void 0 : p.spriteSize.width, null == (k = o.options) ? void 0 : k.spriteSize.height)\n        });\n      }, [o]),\n      y = s(() => \"lat\" in t ? new kakao.maps.LatLng(t.lat, t.lng) : new kakao.maps.Coords(t.x, t.y).toLatLng(), [t.lat, t.lng, t.x, t.y]);\n    return e.createElement(b, {\n      map: f,\n      position: y,\n      image: C,\n      clickable: a,\n      draggable: r,\n      infoWindowOptions: i,\n      onClick: l,\n      onDragEnd: d,\n      onDragStart: c,\n      onMouseOut: p,\n      onMouseOver: k,\n      onCreate: u,\n      opacity: m,\n      title: g,\n      zIndex: h,\n      ref: w\n    }, n);\n  }),\n  M = e.forwardRef((_ref6, l) => {\n    let {\n      position: o,\n      children: t,\n      disableAutoPan: n,\n      removable: a,\n      zIndex: r,\n      onCreate: i\n    } = _ref6;\n    const d = v(\"MapInfoWindow\"),\n      c = s(() => new kakao.maps.LatLng(o.lat, o.lng), [o.lat, o.lng]);\n    return e.createElement(f, {\n      disableAutoPan: n,\n      removable: a,\n      zIndex: r,\n      map: d,\n      position: c,\n      onCreate: i,\n      ref: l\n    }, t);\n  }),\n  L = e.forwardRef((_ref7, u) => {\n    let {\n      position: e,\n      children: t,\n      clickable: n,\n      xAnchor: d,\n      yAnchor: c,\n      zIndex: p,\n      onCreate: k\n    } = _ref7;\n    const m = i(C),\n      g = v(\"CustomOverlayMap\"),\n      h = a(document.createElement(\"div\")),\n      w = s(() => new kakao.maps.LatLng(e.lat, e.lng), [e.lat, e.lng]),\n      f = s(() => {\n        const e = new kakao.maps.CustomOverlay({\n          clickable: n,\n          xAnchor: d,\n          yAnchor: c,\n          zIndex: p,\n          position: w,\n          content: h.current\n        });\n        return h.current.style.display = \"none\", e;\n      }, [n, d, c]);\n    return r(u, () => f, [f]), o(() => {\n      if (g) return m ? m.addMarker(f) : f.setMap(g), () => {\n        m ? m.removeMarker(f) : f.setMap(null);\n      };\n    }, [g, m, f]), o(() => {\n      k && k(f);\n    }, [f, k]), o(() => {\n      f.setPosition(w);\n    }, [f, w]), o(() => {\n      p && f.setZIndex(p);\n    }, [f, p]), h.current.parentElement && l.createPortal(t, h.current.parentElement);\n  }),\n  O = e.forwardRef((_ref8, t) => {\n    let {\n      position: e = kakao.maps.ControlPosition.TOPRIGHT\n    } = _ref8;\n    const n = v(\"MapTypeControl\"),\n      a = s(() => new kakao.maps.MapTypeControl(), []);\n    return r(t, () => a, [a]), o(() => (n.addControl(a, e), () => {\n      n.removeControl(a);\n    }), [n, a, e]), null;\n  }),\n  x = e.forwardRef((_ref9, o) => {\n    let {\n      position: e = kakao.maps.ControlPosition.RIGHT\n    } = _ref9;\n    const n = v(\"ZoomControl\"),\n      a = s(() => new kakao.maps.ZoomControl(), []);\n    return r(o, () => a, [a]), t(() => (n.addControl(a, e), () => {\n      n.removeControl(a);\n    }), [n, e]), null;\n  }),\n  S = _ref10 => {\n    let {\n      type: e\n    } = _ref10;\n    const o = v(\"MapTypeId\");\n    return t(() => (o.addOverlayMapTypeId(e), () => {\n      o.removeOverlayMapTypeId(e);\n    }), [o, e]), null;\n  },\n  z = e.forwardRef((_ref11, C) => {\n    let {\n      center: e,\n      radius: t,\n      fillColor: n,\n      fillOpacity: a,\n      strokeColor: i,\n      strokeOpacity: l,\n      strokeStyle: d,\n      strokeWeight: c,\n      zIndex: p,\n      onMouseover: u,\n      onMouseout: m,\n      onMousemove: g,\n      onMousedown: h,\n      onClick: w,\n      onCreate: f\n    } = _ref11;\n    const y = v(\"Circle\"),\n      b = s(() => new kakao.maps.LatLng(e.lat, e.lng), [e.lat, e.lng]),\n      I = s(() => new kakao.maps.Circle({\n        center: b,\n        radius: t,\n        fillColor: n,\n        fillOpacity: a,\n        strokeColor: i,\n        strokeOpacity: l,\n        strokeStyle: d,\n        strokeWeight: c,\n        zIndex: p\n      }), []);\n    return r(C, () => I, [I]), o(() => (I.setMap(y), () => {\n      I.setMap(null);\n    }), [y, I]), o(() => {\n      f && f(I);\n    }, [I, f]), o(() => {\n      I && I.setPosition(b);\n    }, [I, b]), o(() => {\n      I.setRadius(t);\n    }, [I, t]), o(() => {\n      p && I.setZIndex(p);\n    }, [I, p]), o(() => {\n      I.setOptions({\n        fillColor: n,\n        fillOpacity: a,\n        strokeColor: i,\n        strokeOpacity: l,\n        strokeStyle: d,\n        strokeWeight: c\n      });\n    }, [I, n, a, i, l, d, c]), k(I, \"mouseover\", u), k(I, \"mouseout\", m), k(I, \"mousemove\", g), k(I, \"mousedown\", h), k(I, \"click\", w), null;\n  }),\n  E = e.forwardRef((_ref12, w) => {\n    let {\n      path: e,\n      endArrow: t,\n      onClick: n,\n      onMousedown: a,\n      onMousemove: i,\n      onMouseout: l,\n      onMouseover: d,\n      onCreate: c,\n      strokeColor: p,\n      strokeOpacity: u,\n      strokeStyle: m,\n      strokeWeight: g,\n      zIndex: h\n    } = _ref12;\n    const f = v(\"Polyline\"),\n      C = s(() => e.every(e => e instanceof Array) ? e.map(e => e.map(e => new kakao.maps.LatLng(e.lat, e.lng))) : e.map(e => new kakao.maps.LatLng(e.lat, e.lng)), [e]),\n      y = s(() => new kakao.maps.Polyline({\n        path: C,\n        endArrow: t,\n        strokeColor: p,\n        strokeOpacity: u,\n        strokeStyle: m,\n        strokeWeight: g,\n        zIndex: h\n      }), []);\n    return r(w, () => y, [y]), o(() => (y.setMap(f), () => y.setMap(null)), [f, y]), o(() => {\n      c && c(y);\n    }, [y, c]), o(() => {\n      y.setOptions({\n        endArrow: t,\n        strokeColor: p,\n        strokeOpacity: u,\n        strokeStyle: m,\n        strokeWeight: g\n      });\n    }, [y, t, p, u, m, g]), o(() => {\n      y.setPath(C);\n    }, [y, C]), o(() => {\n      h && y.setZIndex(h);\n    }, [y, h]), k(y, \"mouseover\", d), k(y, \"mouseout\", l), k(y, \"mousemove\", i), k(y, \"mousedown\", a), k(y, \"click\", n), null;\n  }),\n  P = e.forwardRef((_ref13, f) => {\n    let {\n      path: e,\n      onClick: t,\n      onMousedown: n,\n      onMousemove: a,\n      onMouseout: i,\n      onMouseover: l,\n      onCreate: d,\n      strokeColor: c,\n      strokeOpacity: p,\n      strokeStyle: u,\n      strokeWeight: m,\n      fillColor: g,\n      fillOpacity: h,\n      zIndex: w\n    } = _ref13;\n    const C = v(\"Polygon\"),\n      y = s(() => e.every(e => e instanceof Array) ? e.map(e => e.map(e => new kakao.maps.LatLng(e.lat, e.lng))) : e.map(e => new kakao.maps.LatLng(e.lat, e.lng)), [e]),\n      b = s(() => new kakao.maps.Polygon({\n        path: y,\n        fillColor: g,\n        fillOpacity: h,\n        strokeColor: c,\n        strokeOpacity: p,\n        strokeStyle: u,\n        strokeWeight: m,\n        zIndex: w\n      }), []);\n    return r(f, () => b, [b]), o(() => (b.setMap(C), () => b.setMap(null)), [C, b]), o(() => {\n      d && d(b);\n    }, [b, d]), o(() => {\n      b.setOptions({\n        fillColor: g,\n        fillOpacity: h,\n        strokeColor: c,\n        strokeOpacity: p,\n        strokeStyle: u,\n        strokeWeight: m\n      });\n    }, [b, g, h, c, p, u, m]), o(() => {\n      b.setPath(y);\n    }, [b, y]), o(() => {\n      w && b.setZIndex(w);\n    }, [b, w]), k(b, \"mouseover\", l), k(b, \"mouseout\", i), k(b, \"mousemove\", a), k(b, \"mousedown\", n), k(b, \"click\", t), null;\n  }),\n  R = e.forwardRef((_ref14, f) => {\n    let {\n      bounds: e,\n      onClick: t,\n      onMousedown: n,\n      onMousemove: a,\n      onMouseout: i,\n      onMouseover: l,\n      onCreate: d,\n      strokeColor: c,\n      strokeOpacity: p,\n      strokeStyle: u,\n      strokeWeight: m,\n      fillColor: g,\n      fillOpacity: h,\n      zIndex: w\n    } = _ref14;\n    const C = v(\"Rectangle\"),\n      y = s(() => new kakao.maps.LatLngBounds(new kakao.maps.LatLng(e.sw.lat, e.sw.lng), new kakao.maps.LatLng(e.ne.lat, e.ne.lng)), [e]),\n      b = s(() => new kakao.maps.Rectangle({\n        bounds: y,\n        fillColor: g,\n        fillOpacity: h,\n        strokeColor: c,\n        strokeOpacity: p,\n        strokeStyle: u,\n        strokeWeight: m,\n        zIndex: w\n      }), []);\n    return r(f, () => b, [b]), o(() => (b.setMap(C), () => b.setMap(null)), [C, b]), o(() => {\n      d && d(b);\n    }, [b, d]), o(() => {\n      b.setOptions({\n        fillColor: g,\n        fillOpacity: h,\n        strokeColor: c,\n        strokeOpacity: p,\n        strokeStyle: u,\n        strokeWeight: m\n      });\n    }, [b, g, h, c, p, u, m]), o(() => {\n      b.setBounds(y);\n    }, [b, y]), o(() => {\n      w && b.setZIndex(w);\n    }, [b, w]), k(b, \"mouseover\", l), k(b, \"mouseout\", i), k(b, \"mousemove\", a), k(b, \"mousedown\", n), k(b, \"click\", t), null;\n  }),\n  A = e.forwardRef((_ref15, y) => {\n    let {\n      center: e,\n      rx: t,\n      ry: n,\n      fillColor: a,\n      fillOpacity: i,\n      strokeColor: l,\n      strokeOpacity: d,\n      strokeStyle: c,\n      strokeWeight: p,\n      zIndex: u,\n      onMouseover: m,\n      onMouseout: g,\n      onMousemove: h,\n      onMousedown: w,\n      onClick: f,\n      onCreate: C\n    } = _ref15;\n    const b = v(\"Ellipse\"),\n      I = s(() => new kakao.maps.LatLng(e.lat, e.lng), [e.lat, e.lng]),\n      M = s(() => new kakao.maps.Ellipse({\n        center: I,\n        rx: t,\n        ry: n,\n        fillColor: a,\n        fillOpacity: i,\n        strokeColor: l,\n        strokeOpacity: d,\n        strokeStyle: c,\n        strokeWeight: p,\n        zIndex: u\n      }), []);\n    return r(y, () => M, [M]), o(() => (M.setMap(b), () => {\n      M.setMap(null);\n    }), [b, M]), o(() => {\n      C && C(M);\n    }, [M, C]), o(() => {\n      M && M.setPosition(I);\n    }, [M, I]), o(() => {\n      M.setRadius(t, n);\n    }, [M, t, n]), o(() => {\n      u && M.setZIndex(u);\n    }, [M, u]), o(() => {\n      M.setOptions({\n        fillColor: a,\n        fillOpacity: i,\n        strokeColor: l,\n        strokeOpacity: d,\n        strokeStyle: c,\n        strokeWeight: p\n      });\n    }, [M, a, i, l, d, c, p]), k(M, \"mouseover\", m), k(M, \"mouseout\", g), k(M, \"mousemove\", h), k(M, \"mousedown\", w), k(M, \"click\", f), null;\n  }),\n  D = e.forwardRef((_ref16, i) => {\n    let {\n      draw: e,\n      onAdd: t,\n      onRemove: n,\n      onCreate: a\n    } = _ref16;\n    const l = v(),\n      d = s(() => {\n        class o extends kakao.maps.AbstractOverlay {\n          constructor(e, o, t) {\n            super(), this.draw = e, this.onAdd = o, this.onRemove = t;\n          }\n        }\n        return new o(e, t, n);\n      }, [e, t, n]);\n    return r(i, () => d, [d]), o(() => (d.setMap(l), () => {\n      d.setMap(null);\n    }), [l, d]), o(() => {\n      a && a(d);\n    }, [d, a]), null;\n  }),\n  T = [\"id\", \"as\", \"children\", \"position\", \"pan\", \"panoId\", \"panoX\", \"panoY\", \"tilt\", \"zoom\", \"onCreate\", \"onInit\", \"onPanoidChange\", \"onPositionChanged\", \"onViewpointChange\", \"onErrorGetNearestPanoId\"],\n  Z = e.createContext(void 0),\n  W = e.forwardRef((o, t) => {\n    let {\n        id: i,\n        as: s,\n        children: l,\n        position: u,\n        pan: g,\n        panoId: h,\n        panoX: w,\n        panoY: v,\n        tilt: f,\n        zoom: C,\n        onCreate: y,\n        onInit: b,\n        onPanoidChange: I,\n        onPositionChanged: M,\n        onViewpointChange: L,\n        onErrorGetNearestPanoId: O\n      } = o,\n      x = c(o, T);\n    const S = s || \"div\",\n      [z, E] = n(!1),\n      [P, R] = n(!0),\n      [A, D] = n(),\n      W = a(null);\n    return p(() => {\n      m.isLoaded().then(E);\n    }, []), p(() => {\n      if (!z) return;\n      const e = W.current;\n      if (!e) return;\n      const o = new kakao.maps.Roadview(e, {\n        pan: g,\n        panoId: h,\n        panoX: w,\n        panoY: v,\n        tilt: f,\n        zoom: C\n      });\n      return D(o), () => {\n        e.innerHTML = \"\";\n      };\n    }, [z, w, v, C]), r(t, () => A, [A]), p(() => {\n      A && y && y(A);\n    }, [A, y]), p(() => {\n      if (!A || h || A.getPosition().getLat() === u.lat && A.getPosition().getLng() === u.lng) return;\n      const e = new kakao.maps.LatLng(u.lat, u.lng);\n      new kakao.maps.RoadviewClient().getNearestPanoId(e, u.radius, o => {\n        null === o && O ? O(A) : A.setPanoId(o, e);\n      });\n    }, [A, h, u.lat, u.lng, u.radius, O]), p(() => {\n      if (!A || !h || h === A.getPanoId() || A.getPosition().getLat() === u.lat && A.getPosition().getLng() === u.lng) return;\n      const e = new kakao.maps.LatLng(u.lat, u.lng);\n      A.setPanoId(h, e);\n    }, [A, h, u.lat, u.lng]), p(() => {\n      if (!A) return;\n      const e = A.getViewpoint();\n      e.pan === g && e.tilt === f || (g && (e.pan = g), f && (e.tilt = f), A.setViewpoint(e));\n    }, [A, g, f]), k(A, \"init\", e => {\n      R(!1), b && b(e);\n    }), k(A, \"panoid_changed\", I), k(A, \"viewpoint_changed\", L), k(A, \"position_changed\", M), e.createElement(e.Fragment, null, e.createElement(S, d({\n      ref: W,\n      id: i || \"react-kakao-maps-sdk-roadview-container\"\n    }, x)), A && !P && e.createElement(Z.Provider, {\n      value: A\n    }, l));\n  }),\n  N = e => {\n    const o = i(Z);\n    if (!o) throw new Error((e ? e + \" Component\" : \"useRoadview\") + \" must exist inside Roadview Component!\");\n    return o;\n  },\n  j = e.forwardRef((_ref17, m) => {\n    let {\n      position: e,\n      children: t,\n      clickable: n,\n      xAnchor: i,\n      yAnchor: d,\n      zIndex: c,\n      altitude: p,\n      range: k,\n      onCreate: u\n    } = _ref17;\n    const g = N(\"CustomOverlayRoadview\"),\n      h = a(document.createElement(\"div\")),\n      w = s(() => \"lat\" in e ? new kakao.maps.LatLng(e.lat, e.lng) : new kakao.maps.Viewpoint(e.pan, e.tilt, e.zoom, e.panoId), [e.lat, e.lng, e.pan, e.tilt, e.zoom, e.panoId]),\n      v = s(() => {\n        const e = new kakao.maps.CustomOverlay({\n          clickable: n,\n          xAnchor: i,\n          yAnchor: d,\n          zIndex: c,\n          position: w,\n          content: h.current\n        });\n        return h.current.style.display = \"none\", e;\n      }, [n, i, d]);\n    return r(m, () => v, [v]), o(() => {\n      if (g) return v.setMap(g), () => {\n        v.setMap(null);\n      };\n    }, [v, g]), o(() => {\n      u && u(v);\n    }, [v, u]), o(() => {\n      v.setPosition(w);\n    }, [v, w]), o(() => {\n      c && v.setZIndex(c);\n    }, [v, c]), o(() => {\n      p && v.setAltitude(p);\n    }, [v, p]), o(() => {\n      k && v.setRange(k);\n    }, [v, k]), h.current.parentElement && l.createPortal(t, h.current.parentElement);\n  }),\n  _ = e.forwardRef((_ref18, v) => {\n    let {\n      image: o,\n      position: t,\n      children: n,\n      altitude: a,\n      clickable: r,\n      infoWindowOptions: i,\n      onClick: l,\n      onDragEnd: d,\n      onDragStart: c,\n      onMouseOut: p,\n      onMouseOver: k,\n      onCreate: u,\n      opacity: m,\n      range: g,\n      title: h,\n      zIndex: w\n    } = _ref18;\n    const f = N(\"RoadviewMarker\"),\n      C = s(() => {\n        var e, t, n, a, r, i, s, l, d, c, p, k;\n        return o && new kakao.maps.MarkerImage(o.src, new kakao.maps.Size(o.size.width, o.size.height), {\n          alt: null == (e = o.options) ? void 0 : e.alt,\n          coords: null == (t = o.options) ? void 0 : t.coords,\n          offset: (null == (n = o.options) ? void 0 : n.offset) && new kakao.maps.Point(null == (a = o.options) ? void 0 : a.offset.x, null == (r = o.options) ? void 0 : r.offset.y),\n          shape: null == (i = o.options) ? void 0 : i.shape,\n          spriteOrigin: (null == (s = o.options) ? void 0 : s.spriteOrigin) && new kakao.maps.Point(null == (l = o.options) ? void 0 : l.spriteOrigin.x, null == (d = o.options) ? void 0 : d.spriteOrigin.y),\n          spriteSize: (null == (c = o.options) ? void 0 : c.spriteSize) && new kakao.maps.Size(null == (p = o.options) ? void 0 : p.spriteSize.width, null == (k = o.options) ? void 0 : k.spriteSize.height)\n        });\n      }, [o]),\n      y = s(() => \"lat\" in t ? new kakao.maps.LatLng(t.lat, t.lng) : \"x\" in t ? new kakao.maps.Coords(t.x, t.y).toLatLng() : new kakao.maps.Viewpoint(t.pan, t.tilt, t.zoom, t.panoId), [t.lat, t.lng, t.x, t.y, t.pan, t.tilt, t.zoom, null == t ? void 0 : t.panoId]);\n    return e.createElement(b, {\n      map: f,\n      position: y,\n      image: C,\n      altitude: a,\n      clickable: r,\n      infoWindowOptions: i,\n      onClick: l,\n      onDragEnd: d,\n      onDragStart: c,\n      onMouseOut: p,\n      onMouseOver: k,\n      onCreate: u,\n      opacity: m,\n      range: g,\n      title: h,\n      zIndex: w,\n      ref: v\n    }, n);\n  }),\n  F = e.forwardRef((_ref19, c) => {\n    let {\n      position: o,\n      children: t,\n      altitude: n,\n      disableAutoPan: a,\n      range: r,\n      removable: i,\n      zIndex: l,\n      onCreate: d\n    } = _ref19;\n    const p = N(\"RoadviewInfoWindow\"),\n      k = s(() => \"lat\" in o ? new kakao.maps.LatLng(o.lat, o.lng) : new kakao.maps.Viewpoint(o.pan, o.tilt, o.zoom, o.panoId), [o.lat, o.lng, o.pan, o.tilt, o.zoom, o.panoId]);\n    return e.createElement(f, {\n      altitude: n,\n      disableAutoPan: a,\n      range: r,\n      removable: i,\n      zIndex: l,\n      map: p,\n      position: k,\n      onCreate: d,\n      ref: c\n    }, t);\n  }),\n  G = e.createContext(void 0);\nfunction U(e, t, n) {\n  o(() => {\n    e && n && e.addListener(t, function () {\n      for (var _len2 = arguments.length, o = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        o[_key2] = arguments[_key2];\n      }\n      return void 0 === o ? n(e) : n(e, ...o);\n    });\n  }, [n, e, t]);\n}\nconst V = e.forwardRef(function (_ref20, M) {\n    let {\n      arrowOptions: t,\n      circleOptions: n,\n      ellipseOptions: a,\n      markerOptions: i,\n      polygonOptions: l,\n      polylineOptions: d,\n      rectangleOptions: c,\n      drawingMode: p,\n      guideTooltip: k,\n      onSelect: u,\n      onDrawstart: m,\n      onDraw: g,\n      onDrawend: h,\n      onDrawnext: w,\n      onCancle: f,\n      onRemove: C,\n      onStateChanged: y,\n      onCreate: b,\n      children: I\n    } = _ref20;\n    const L = v(\"Toolbox\"),\n      O = s(() => {\n        if (window.kakao.maps.drawing) return new kakao.maps.drawing.DrawingManager({\n          map: L,\n          drawingMode: p,\n          guideTooltip: k,\n          arrowOptions: t,\n          circleOptions: n,\n          ellipseOptions: a,\n          markerOptions: i,\n          polygonOptions: l,\n          polylineOptions: d,\n          rectangleOptions: c\n        });\n        console.warn(\"drawing 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\");\n      }, []);\n    return r(M, () => O, [O]), o(() => {\n      O && b && b(O);\n    }, [O, b]), U(O, \"select\", u), U(O, \"drawstart\", m), U(O, \"draw\", g), U(O, \"drawend\", h), U(O, \"drawnext\", w), U(O, \"cancel\", f), U(O, \"remove\", C), U(O, \"state_changed\", y), O ? e.createElement(G.Provider, {\n      value: O\n    }, I) : null;\n  }),\n  B = e.forwardRef(function (_ref21, t) {\n    let {\n      position: e\n    } = _ref21;\n    e = e || kakao.maps.ControlPosition.TOP;\n    const n = v(\"Toolbox\"),\n      a = i(G);\n    if (!a) throw new Error(\"Toolbox must exist inside DrawingManager Component!`\");\n    const l = s(() => new kakao.maps.drawing.Toolbox({\n      drawingManager: a\n    }), [a]);\n    return r(t, () => l, [l]), o(() => {\n      const o = l.getElement();\n      return n.addControl(o, e), () => {\n        n.removeControl(o);\n      };\n    }, [n, l, e]), null;\n  }),\n  $ = e.forwardRef((_ref22, m) => {\n    let {\n      id: o = \"react-kakao-maps-sdk-staticmap-container\",\n      style: t,\n      className: i,\n      center: s,\n      marker: l,\n      level: c,\n      mapTypeId: k,\n      onCreate: u\n    } = _ref22;\n    const [g, h] = n(),\n      w = a(null);\n    return p(() => {\n      if (!window.kakao) return void console.warn(\"kakao map javascript api를 먼저 불러와야 합니다. `https://apis.map.kakao.com/web/guide`\");\n      const e = w.current;\n      e && kakao.maps.load(() => {\n        const o = Array.isArray(l) ? l.map(e => d({}, e, {\n            position: new kakao.maps.LatLng(e.position.lat, e.position.lng)\n          })) : \"object\" == typeof l && l.position ? d({}, l, {\n            position: new kakao.maps.LatLng(l.position.lat, l.position.lng)\n          }) : l,\n          t = new kakao.maps.StaticMap(e, {\n            center: new kakao.maps.LatLng(s.lat, s.lng),\n            level: c,\n            mapTypeId: k,\n            marker: o\n          });\n        h(t);\n      });\n    }, [JSON.stringify(l)]), r(m, () => g, [g]), p(() => {\n      g && g.setCenter(new kakao.maps.LatLng(s.lat, s.lng));\n    }, [g, s.lat, s.lng]), p(() => {\n      g && c && g.setLevel(c);\n    }, [g, c]), p(() => {\n      g && k && g.setMapTypeId(k);\n    }, [g, k]), p(() => {\n      g && u && u(g);\n    }, [g, u]), e.createElement(\"div\", {\n      id: o,\n      style: t,\n      className: i,\n      ref: w\n    });\n  }),\n  q = e => {\n    const [o, a] = n({\n        loading: !0,\n        error: void 0\n      }),\n      r = s(() => new m(e), [JSON.stringify(e)]);\n    return t(() => {\n      r.load().then(() => a({\n        loading: !1,\n        error: void 0\n      })).catch(e => a({\n        loading: !1,\n        error: e\n      }));\n    }, [r]), o;\n  };\nexport { D as AbstractOverlay, z as Circle, L as CustomOverlayMap, j as CustomOverlayRoadview, V as DrawingManager, A as Ellipse, m as Loader, w as Map, M as MapInfoWindow, I as MapMarker, O as MapTypeControl, S as MapTypeId, y as MarkerClusterer, P as Polygon, E as Polyline, R as Rectangle, W as Roadview, F as RoadviewInfoWindow, _ as RoadviewMarker, $ as StaticMap, B as Toolbox, x as ZoomControl, q as useInjectKakaoMapApi, v as useMap, N as useRoadview };","map":{"version":3,"names":["p","window","document","o","t","k","useKakaoEvent","e","n","wrapCallback","_len","arguments","length","Array","_key","kakao","maps","event","addListener","removeListener","u","INITIALIZED","LOADING","SUCCESS","FAILURE","m","constructor","_ref","appkey","id","libraries","nonce","retries","a","url","r","callbacks","done","loading","errors","onerrorEvent","instance","equalOptions","options","Error","JSON","stringify","isLoaded","Promise","status","loadcheckcallbacks","push","load","loadCallback","error","failed","execute","resetIfRetryingFailed","reset","deleteScript","callback","console","warn","setScript","getElementById","createUrl","createElement","type","src","onerror","loadErrorCallback","bind","onload","defer","async","head","appendChild","source","lineno","colno","log","setTimeout","join","remove","forEach","g","h","createContext","w","forwardRef","i","as","s","children","l","center","isPanto","padding","v","disableDoubleClick","f","disableDoubleClickZoom","C","draggable","y","zoomable","b","keyboardShortcuts","I","level","M","maxLevel","L","minLevel","O","mapTypeId","x","projectionId","S","scrollwheel","z","tileAnimation","E","onBoundsChanged","P","onCenterChanged","R","onClick","A","onDoubleClick","D","onDrag","T","onDragEnd","Z","onDragStart","W","onIdle","N","onMaptypeidChanged","j","onMouseMove","_","onRightClick","F","onTileLoaded","G","onZoomChanged","U","onZoomStart","V","onCreate","B","$","c","q","H","J","K","X","Y","then","current","LatLng","lat","lng","Coords","Map","innerHTML","getCenter","toLatLng","equals","panTo","setCenter","setDraggable","setZoomable","setKeyboardShortcuts","setLevel","setMapTypeId","setProjectionId","setMaxLevel","setMinLevel","Fragment","d","ref","Provider","value","_ref2","map","position","marker","altitude","disableAutoPan","range","removable","zIndex","InfoWindow","content","style","display","open","close","setPosition","setAltitude","setRange","setZIndex","parentElement","createPortal","_ref3","averageCenter","calculator","clickable","disableClickZoom","gridSize","hoverable","minClusterSize","styles","texts","onClusterclick","onClusterdblclick","onClustered","onClusterout","onClusterover","onClusterrightclick","MarkerClusterer","setMap","setGridSize","redraw","setMinClusterSize","setAverageCenter","setTexts","setCalculator","setStyles","_ref4","image","infoWindowOptions","onMouseOut","onMouseOver","opacity","title","Marker","addMarker","removeMarker","setImage","setClickable","setOpacity","setTitle","_ref5","MarkerImage","Size","size","width","height","alt","coords","offset","Point","shape","spriteOrigin","spriteSize","_ref6","_ref7","xAnchor","yAnchor","CustomOverlay","_ref8","ControlPosition","TOPRIGHT","MapTypeControl","addControl","removeControl","_ref9","RIGHT","ZoomControl","_ref10","addOverlayMapTypeId","removeOverlayMapTypeId","_ref11","radius","fillColor","fillOpacity","strokeColor","strokeOpacity","strokeStyle","strokeWeight","onMouseover","onMouseout","onMousemove","onMousedown","Circle","setRadius","setOptions","_ref12","path","endArrow","every","Polyline","setPath","_ref13","Polygon","_ref14","bounds","LatLngBounds","sw","ne","Rectangle","setBounds","_ref15","rx","ry","Ellipse","_ref16","draw","onAdd","onRemove","AbstractOverlay","pan","panoId","panoX","panoY","tilt","zoom","onInit","onPanoidChange","onPositionChanged","onViewpointChange","onErrorGetNearestPanoId","Roadview","getPosition","getLat","getLng","RoadviewClient","getNearestPanoId","setPanoId","getPanoId","getViewpoint","setViewpoint","_ref17","Viewpoint","_ref18","_ref19","_len2","_key2","_ref20","arrowOptions","circleOptions","ellipseOptions","markerOptions","polygonOptions","polylineOptions","rectangleOptions","drawingMode","guideTooltip","onSelect","onDrawstart","onDraw","onDrawend","onDrawnext","onCancle","onStateChanged","drawing","DrawingManager","_ref21","TOP","Toolbox","drawingManager","getElement","_ref22","className","isArray","StaticMap","catch","CustomOverlayMap","CustomOverlayRoadview","Loader","MapInfoWindow","MapMarker","MapTypeId","RoadviewInfoWindow","RoadviewMarker","useInjectKakaoMapApi","useMap","useRoadview"],"sources":["/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/hooks/useIsomorphicLayoutEffect.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/hooks/useKakaoEvent.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/util/kakaoMapApiLoader.ts","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/Map.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/hooks/useMap.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/InfoWindow.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/MarkerClusterer.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/Marker.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/MapMarker.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/MapInfoWindow.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/CustomOverlayMap.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/MapTypeControl.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/ZoomControl.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/MapTypeId.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/Circle.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/Polyline.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/Polygon.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/Rectangle.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/Ellipse.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/AbstractOverlay.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/Roadview.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/hooks/useRoadview.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/CustomOverlayRoadview.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/RoadviewMarker.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/RoadviewInfoWindow.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/DrawingManager.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/Toolbox.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/components/StaticMap.tsx","/Users/sangminkim/VRAR/reate/ex09/node_modules/react-kakao-maps-sdk/src/hooks/useInjectKakaoMapApi.tsx"],"sourcesContent":["import { useEffect, useLayoutEffect } from \"react\"\n\nconst useIsomorphicLayoutEffect =\n  typeof window !== \"undefined\" && typeof document !== \"undefined\"\n    ? useLayoutEffect\n    : useEffect\n\nexport default useIsomorphicLayoutEffect\n","import useIsomorphicLayoutEffect from \"./useIsomorphicLayoutEffect\"\n\nconst useKakaoEvent = <T extends kakao.maps.event.EventTarget>(\n  /**\n   * 이벤트 타겟\n   */\n  target: T | undefined,\n  /**\n   * event 타입\n   */\n  type: \"center_changed\"|\"zoom_start\"|\"zoom_changed\"|\"bounds_changed\"|\"click\"|\"dblclick\"|\"rightclick\"|\"mouseover\"|\"mouseout\"|\"mousemove\"|\"mousedown\"|\"dragstart\"|\"drag\"|\"dragend\"|\"idle\"|\"tilesloaded\"|\"maptypeid_changed\"|\"clusterclick\"|\"clusterover\"|\"clusterout\"|\"clusterdblclick\"|\"clusterrightclick\"|\"clustered\"|\"init\"|\"panoid_changed\"|\"viewpoint_changed\"|\"position_changed\",\n  /**\n   * 호출될 callback\n   */\n  callback: ((target: T, ...args: any[]) => void) | undefined\n) => {\n  useIsomorphicLayoutEffect(() => {\n    if (!target || !callback) return\n\n    const wrapCallback = (...arg: any[]) => {\n      if (arg === undefined) return callback(target)\n      else return callback(target, ...arg)\n    }\n\n    kakao.maps.event.addListener(target, type, wrapCallback)\n\n    return () => {\n      kakao.maps.event.removeListener(target, type, wrapCallback)\n    }\n  }, [target, type, callback])\n}\n\nexport default useKakaoEvent\n","export type Libraries = (\"services\" | \"clusterer\" | \"drawing\")[]\n\nexport interface LoaderOptions {\n  /**\n   * script 객체 생성시 사용자 정의 id\n   */\n  id?: string\n  /**\n   * 발급 받은 Kakao 지도 Javscript API 키.\n   *\n   * @see [준비하기](https://apis.map.kakao.com/web/guide/#ready)\n   */\n  appkey: string\n  /**\n   * 사용하는 라이브러리 목록\n   *\n   * Kakao 지도 Javascript API 는 지도와 함께 사용할 수 있는 라이브러리 를 지원하고 있습니다.\n   * 라이브러리는 javascript API와 관련되어 있지만 조금 특화된 기능을 묶어둔 것을 말합니다. 이 기능은 추가로 불러와서 사용할 수 있도록 되어있습니다.\n   * 현재 사용할 수 있는 라이브러리는 다음과 같습니다.\n   *\n   * clusterer: 마커를 클러스터링 할 수 있는 클러스터러 라이브러리 입니다.\n   * services: 장소 검색 과 주소-좌표 변환 을 할 수 있는 services 라이브러리 입니다.\n   * drawing: 지도 위에 마커와 그래픽스 객체를 쉽게 그릴 수 있게 그리기 모드를 지원하는 drawing 라이브러리 입니다.\n   * 라이브러리는 계속해서 추가될 예정입니다.\n   */\n  libraries?: Libraries\n  /**\n   * 사용자 정의 Kakao 지도 javascript 경로 지정\n   *\n   * @default \"//dapi.kakao.com/v2/maps/sdk.js\"\n   */\n  url?: string\n  /**\n   * 보안을 위한 nonce 값 설정\n   */\n  nonce?: string\n  /**\n   * 스크립트 로드 재시도 횟수\n   */\n  retries?: number\n}\n\nexport enum LoaderStatus {\n  INITIALIZED,\n  LOADING,\n  SUCCESS,\n  FAILURE,\n}\n\nconst DEFAULT_ID = \"__reactKakaoMapsSdkloaderId\"\n\n/**\n * Kakao Map Api Loader\n *\n * `new Loader(options).load()` 함수를 이용하여 Api를 비동기적으로 삽입할 수 있습니다.\n *\n * 해당 Loader를 이용시 `react-kakao-maps-sdk` 내부에서 injection 되는 이벤트를 감지하여 kakao map api 로딩 이후에 렌더링을 진행합니다.\n */\nexport class Loader {\n  private static instance: Loader\n  private static loadcheckcallbacks: ((e?: ErrorEvent) => void)[] = []\n\n  public readonly id: string\n  public readonly appkey: string\n  public readonly url: string\n  public readonly libraries: Libraries\n  public readonly nonce: string | undefined\n  public readonly retries: number\n\n  private callbacks: ((e?: ErrorEvent) => void)[] = []\n  private done = false\n  private loading = false\n  private errors: ErrorEvent[] = []\n  private onerrorEvent: ErrorEvent | undefined\n\n  constructor({\n    appkey,\n    id = DEFAULT_ID,\n    libraries = [],\n    nonce,\n    retries = 3,\n    url = \"//dapi.kakao.com/v2/maps/sdk.js\",\n  }: LoaderOptions) {\n    this.id = id\n    this.appkey = appkey\n    this.libraries = libraries\n    this.nonce = nonce\n    this.retries = retries\n    this.url = url\n\n    if (Loader.instance) {\n      if (!Loader.equalOptions(this.options, Loader.instance.options)) {\n        throw new Error(\n          `Loader must not be called again with different options. ${JSON.stringify(\n            this.options\n          )} !== ${JSON.stringify(Loader.instance.options)}`\n        )\n      }\n\n      return Loader.instance\n    }\n    Loader.instance = this\n  }\n\n  public get options() {\n    return {\n      appkey: this.appkey,\n      id: this.id,\n      libraries: this.libraries,\n      nonce: this.nonce,\n      retries: this.retries,\n      url: this.url,\n    }\n  }\n\n  public static isLoaded(): Promise<boolean> {\n    return new Promise((resolve) => {\n      if (!Loader.instance) {\n        if (window.kakao && window.kakao.maps) {\n          return window.kakao.maps.load(() => {\n            resolve(true)\n          })\n        }\n        return Loader.loadcheckcallbacks.push((e) => {\n          resolve(!e)\n        })\n      }\n\n      if (\n        Loader.instance.status === LoaderStatus.FAILURE ||\n        Loader.instance.status === LoaderStatus.INITIALIZED\n      ) {\n        return resolve(false)\n      }\n\n      if (Loader.instance.status === LoaderStatus.LOADING) {\n        Loader.loadcheckcallbacks.push((e) => resolve(!e))\n      }\n\n      return resolve(true)\n    })\n  }\n\n  public load(): Promise<typeof kakao> {\n    return new Promise((resolve, reject) => {\n      this.loadCallback((err?: ErrorEvent) => {\n        if (!err) {\n          resolve(window.kakao)\n        } else {\n          reject(err.error)\n        }\n      })\n    })\n  }\n\n  public get status(): LoaderStatus {\n    if (this.onerrorEvent) {\n      return LoaderStatus.FAILURE\n    }\n    if (this.done) {\n      return LoaderStatus.SUCCESS\n    }\n    if (this.loading) {\n      return LoaderStatus.LOADING\n    }\n    return LoaderStatus.INITIALIZED\n  }\n\n  private get failed(): boolean {\n    return this.done && !this.loading && this.errors.length >= this.retries + 1\n  }\n\n  private loadCallback(fn: (e?: ErrorEvent) => void): void {\n    this.callbacks.push(fn)\n    this.execute()\n  }\n\n  private resetIfRetryingFailed(): void {\n    if (this.failed) {\n      this.reset()\n    }\n  }\n\n  private reset(): void {\n    this.deleteScript()\n    this.done = false\n    this.loading = false\n    this.errors = []\n    this.onerrorEvent = undefined\n  }\n\n  private execute() {\n    this.resetIfRetryingFailed()\n\n    if (this.done) {\n      this.callback()\n    } else {\n      if (window.kakao && window.kakao.maps) {\n        console.warn(\n          \"Kakao Maps이 이미 외부 요소에 의해 로딩되어 있습니다.\" +\n            \"설정한 옵션과 일치 하지 않을 수 있으며, 이에 따른 예상치 동작이 발생할 수 있습니다.\"\n        )\n        window.kakao.maps.load(this.callback);\n        return\n      }\n\n      if (!this.loading) {\n        this.loading = true\n        this.setScript()\n      }\n    }\n  }\n\n  private setScript() {\n    if (document.getElementById(this.id)) {\n      this.callback()\n    }\n\n    const url = this.createUrl()\n    const script = document.createElement(\"script\")\n\n    script.id = this.id\n    script.type = \"text/javascript\"\n    script.src = url\n    script.onerror = this.loadErrorCallback.bind(this)\n    script.onload = this.callback.bind(this)\n    script.defer = true\n    script.async = true\n\n    if (this.nonce) {\n      script.nonce = this.nonce\n    }\n\n    document.head.appendChild(script)\n  }\n\n  private loadErrorCallback(\n    event: Event | string,\n    source?: string,\n    lineno?: number,\n    colno?: number,\n    error?: Error\n  ): void {\n    this.errors.push({\n      event,\n      source,\n      // @ts-ignore\n      lineno,\n      // @ts-ignore\n      colno,\n      error,\n    })\n\n    if (this.errors.length <= this.retries) {\n      const delay = this.errors.length * 2 ** this.errors.length\n\n      console.log(`Failed to load Kakao Maps script, retrying in ${delay} ms.`)\n\n      setTimeout(() => {\n        this.deleteScript()\n        this.setScript()\n      }, delay)\n    } else {\n      this.onerrorEvent = this.errors[this.errors.length - 1]\n      this.callback()\n    }\n  }\n\n  public createUrl(): string {\n    let url = this.url\n    url += `?appkey=${this.appkey}`\n\n    if (this.libraries.length) {\n      url += `&libraries=${this.libraries.join(\",\")}`\n    }\n\n    url += `&autoload=false`\n\n    return url\n  }\n\n  private deleteScript() {\n    const script = document.getElementById(this.id)\n    if (script) {\n      script.remove()\n    }\n  }\n\n  private callback() {\n    kakao.maps.load(() => {\n      this.done = true\n      this.loading = false\n\n      this.callbacks.forEach((cb) => {\n        cb(this.onerrorEvent)\n      })\n      this.callbacks = []\n\n      Loader.loadcheckcallbacks.forEach((cb) => {\n        cb(this.onerrorEvent)\n      })\n      Loader.loadcheckcallbacks = []\n    })\n  }\n\n  private static equalOptions(\n    a: typeof Loader.prototype.options,\n    b: typeof Loader.prototype.options\n  ): boolean {\n    if (a.appkey !== b.appkey) return false\n    if (a.id !== b.id) return false\n\n    if (a.libraries.length !== b.libraries.length) return false\n    for (let i = 0; i < a.libraries.length; ++i) {\n      if (a.libraries[i] !== b.libraries[i]) return false\n    }\n    if (a.nonce !== b.nonce) return false\n    if (a.retries !== b.retries) return false\n    if (a.url !== b.url) return false\n    return true\n  }\n}\n","import React, { useRef, useState, useImperativeHandle } from \"react\"\nimport useIsomorphicLayoutEffect from \"../hooks/useIsomorphicLayoutEffect\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport { PolymorphicComponentPropsWithOutRef } from \"../types\"\nimport { Loader } from \"../util/kakaoMapApiLoader\"\n\nexport const KakaoMapContext = React.createContext<kakao.maps.Map>(\n  undefined as unknown as kakao.maps.Map\n)\n\nexport type MapProps = {\n  /**\n   * 중심으로 설정할 위치 입니다.\n   */\n  center:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n\n  /**\n   * 중심을 이동시킬때 Panto를 사용할지 정합니다.\n   * @default false\n   */\n  isPanto?: boolean\n\n  /**\n   * 중심 좌표를 지정한 좌표 또는 영역으로 부드럽게 이동한다. 필요하면 확대 또는 축소도 수행한다.\n   * 만약 이동할 거리가 지도 화면의 크기보다 클 경우 애니메이션 없이 이동한다.\n   * padding 만큼 제외하고 영역을 계산하며, padding 을 지정하지 않으면 기본값으로 32가 사용된다.\n   */\n  padding?: number\n\n  /**\n   * 확대 수준 (기본값: 3)\n   */\n  level?: number\n\n  /**\n   * 최대 확대 수준\n   */\n  maxLevel?: number\n\n  /**\n   * 최소 확대 수준\n   */\n  minLevel?: number\n\n  /**\n   * 지도 종류 (기본값: 일반 지도)\n   */\n  mapTypeId?: kakao.maps.MapTypeId\n\n  /**\n   * 마우스 드래그, 휠, 모바일 터치를 이용한 시점 변경(이동, 확대, 축소) 가능 여부\n   */\n  draggable?: boolean\n\n  /**\n   * 마우스 휠이나 멀티터치로 지도 확대, 축소 기능을 막습니다. 상황에 따라 지도 확대, 축소 기능을 제어할 수 있습니다.\n   */\n  zoomable?: boolean\n\n  /**\n   * 마우스 휠, 모바일 터치를 이용한 확대 및 축소 가능 여부\n   */\n  scrollwheel?: boolean\n\n  /**\n   * 더블클릭 이벤트 및 더블클릭 확대 가능 여부\n   */\n  disableDoubleClick?: boolean\n\n  /**\n   * 더블클릭 확대 가능 여부\n   */\n  disableDoubleClickZoom?: boolean\n\n  /**\n   * 투영법 지정 (기본값: kakao.maps.ProjectionId.WCONG)\n   */\n  projectionId?: string\n\n  /**\n   * 지도 타일 애니메이션 설정 여부 (기본값: true)\n   */\n  tileAnimation?: boolean\n\n  /**\n   * 키보드의 방향키와 +, – 키로 지도 이동,확대,축소 가능 여부 (기본값: false)\n   */\n  keyboardShortcuts?:\n    | boolean\n    | {\n        /**\n         * 지도 이동 속도\n         */\n        speed: number\n      }\n\n  /**\n   * map 생성 후 해당 객체를 전달하는 함수\n   */\n  onCreate?: (map: kakao.maps.Map) => void\n\n  /**\n   * 중심 좌표가 변경되면 발생한다.\n   */\n  onCenterChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대 수준이 변경되기 직전 발생한다.\n   */\n  onZoomStart?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대 수준이 변경되면 발생한다.\n   */\n  onZoomChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도 영역이 변경되면 발생한다.\n   */\n  onBoundsChanged?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도를 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도를 더블클릭하면 발생한다.\n   */\n  onDoubleClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도를 마우스 오른쪽 버튼으로 클릭하면 발생한다.\n   */\n  onRightClick?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 지도에서 마우스 커서를 이동하면 발생한다.\n   */\n  onMouseMove?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그를 시작할 때 발생한다.\n   */\n  onDragStart?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그를 하는 동안 발생한다.\n   */\n  onDrag?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 드래그가 끝날 때 발생한다.\n   */\n  onDragEnd?: (\n    target: kakao.maps.Map,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 중심 좌표나 확대 수준이 변경되면 발생한다.\n   * 단, 애니메이션 도중에는 발생하지 않는다.\n   */\n  onIdle?: (target: kakao.maps.Map) => void\n\n  /**\n   * 확대수준이 변경되거나 지도가 이동했을때 타일 이미지 로드가 모두 완료되면 발생한다.\n   * 지도이동이 미세하기 일어나 타일 이미지 로드가 일어나지 않은경우 발생하지 않는다.\n   */\n  onTileLoaded?: (target: kakao.maps.Map) => void\n\n  /**\n   * 지도 기본 타일(일반지도, 스카이뷰, 하이브리드)이 변경되면 발생한다.\n   */\n  onMaptypeidChanged?: (target: kakao.maps.Map) => void\n\n  children?: React.ReactNode | undefined\n}\n\ntype MapComponent = <T extends React.ElementType = \"div\">(\n  props: PolymorphicComponentPropsWithOutRef<T, MapProps> &\n    React.RefAttributes<kakao.maps.Map>\n) => React.ReactElement | null\n\n/**\n * 기본적인 Map 객체를 생성하는 Comeponent 입니다.\n * props로 받는 `on*` 이벤트는 해당 `kakao.maps.Map` 객체를 함께 인자로 전달 합니다.\n *\n * `ref`를 통해 `map` 객체에 직접 접근하여 사용 또는 onCreate 이벤트를 이용하여 접근이 가능합니다.\n *\n * > *주의 사항* `Map`, `RoadView` 컴포넌트에 한하여, ref 객체가 컴포넌트 마운트 시점에 바로 초기화가 안될 수 있습니다.\n * >\n * > 컴포넌트 마운트 시점에 `useEffect` 를 활용하여, 특정 로직을 수행하고 싶은 경우 `ref` 객체를 사용하는 것보다\n * > `onCreate` 이벤트와 `useState`를 함께 활용하여 제어하는 것을 추천 드립니다.\n */\nconst Map: MapComponent = React.forwardRef(\n  <T extends React.ElementType = \"div\">(\n    {\n      id,\n      as,\n      children,\n      center,\n      isPanto = false,\n      padding = 32,\n      disableDoubleClick,\n      disableDoubleClickZoom,\n      draggable,\n      zoomable,\n      keyboardShortcuts,\n      level,\n      maxLevel,\n      minLevel,\n      mapTypeId,\n      projectionId,\n      scrollwheel,\n      tileAnimation,\n      onBoundsChanged,\n      onCenterChanged,\n      onClick,\n      onDoubleClick,\n      onDrag,\n      onDragEnd,\n      onDragStart,\n      onIdle,\n      onMaptypeidChanged,\n      onMouseMove,\n      onRightClick,\n      onTileLoaded,\n      onZoomChanged,\n      onZoomStart,\n      onCreate,\n      ...props\n    }: PolymorphicComponentPropsWithOutRef<T, MapProps>,\n    ref: React.ForwardedRef<kakao.maps.Map>\n  ) => {\n    const Container = as || \"div\"\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [map, setMap] = useState<kakao.maps.Map>()\n    const container = useRef<HTMLDivElement>(null)\n\n    useIsomorphicLayoutEffect(() => {\n      Loader.isLoaded().then(setIsLoaded)\n    }, [])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!isLoaded) return\n\n      const MapContainer = container.current\n\n      if (!MapContainer) {\n        return\n      }\n\n      const initalMapCenter =\n        \"lat\" in center\n          ? new kakao.maps.LatLng(center.lat, center.lng)\n          : new kakao.maps.Coords(center.x, center.y)\n\n      const kakaoMap = new kakao.maps.Map(MapContainer, {\n        center: initalMapCenter,\n        disableDoubleClick: disableDoubleClick,\n        disableDoubleClickZoom: disableDoubleClickZoom,\n        draggable: draggable,\n        keyboardShortcuts: keyboardShortcuts,\n        level: level,\n        mapTypeId: mapTypeId,\n        projectionId: projectionId,\n        scrollwheel: scrollwheel,\n        tileAnimation: tileAnimation,\n      })\n\n      setMap(kakaoMap)\n\n      return () => {\n        MapContainer.innerHTML = \"\"\n      }\n    }, [\n      isLoaded,\n      disableDoubleClick,\n      disableDoubleClickZoom,\n      mapTypeId,\n      tileAnimation,\n    ])\n\n    useImperativeHandle(ref, () => map!, [map])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !onCreate) return\n      onCreate(map)\n    }, [map, onCreate])\n\n    // center position 변경시 map center 변경\n    useIsomorphicLayoutEffect(() => {\n      if (!map) return\n\n      let prevCenter = map.getCenter()\n      if (prevCenter instanceof kakao.maps.Coords) {\n        prevCenter = prevCenter.toLatLng()\n      }\n\n      const centerPosition =\n        \"lat\" in center\n          ? new kakao.maps.LatLng(center.lat, center.lng)\n          : new kakao.maps.Coords(center.x, center.y)\n\n      if (\n        (centerPosition instanceof kakao.maps.LatLng &&\n          centerPosition.equals(prevCenter)) ||\n        (centerPosition instanceof kakao.maps.Coords &&\n          centerPosition.toLatLng().equals(prevCenter))\n      ) {\n        return\n      }\n\n      if (isPanto) {\n        map.panTo(centerPosition, padding)\n      } else {\n        map.setCenter(centerPosition)\n      }\n      // @ts-ignore\n    }, [map, center.lat, center.lng, center.x, center.y])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || typeof draggable === \"undefined\") return\n      map.setDraggable(draggable)\n    }, [map, draggable])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || typeof zoomable === \"undefined\") return\n      map.setZoomable(zoomable)\n    }, [map, zoomable])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !keyboardShortcuts || typeof keyboardShortcuts !== \"boolean\")\n        return\n      map.setKeyboardShortcuts(keyboardShortcuts)\n    }, [map, keyboardShortcuts])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !level) return\n      map.setLevel(level)\n    }, [map, level])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !mapTypeId) return\n      map.setMapTypeId(mapTypeId)\n    }, [map, mapTypeId])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !projectionId) return\n      map.setProjectionId(projectionId)\n    }, [map, projectionId])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !maxLevel) return\n      map.setMaxLevel(maxLevel)\n    }, [map, maxLevel])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!map || !minLevel) return\n      map.setMinLevel(minLevel)\n    }, [map, minLevel])\n\n    useKakaoEvent(map, \"bounds_changed\", onBoundsChanged)\n    useKakaoEvent(map, \"center_changed\", onCenterChanged)\n    useKakaoEvent(map, \"click\", onClick)\n    useKakaoEvent(map, \"dblclick\", onDoubleClick)\n    useKakaoEvent(map, \"drag\", onDrag)\n    useKakaoEvent(map, \"dragstart\", onDragStart)\n    useKakaoEvent(map, \"dragend\", onDragEnd)\n    useKakaoEvent(map, \"idle\", onIdle)\n    useKakaoEvent(map, \"maptypeid_changed\", onMaptypeidChanged)\n    useKakaoEvent(map, \"mousemove\", onMouseMove)\n    useKakaoEvent(map, \"rightclick\", onRightClick)\n    useKakaoEvent(map, \"tilesloaded\", onTileLoaded)\n    useKakaoEvent(map, \"zoom_changed\", onZoomChanged)\n    useKakaoEvent(map, \"zoom_start\", onZoomStart)\n\n    return (\n      <>\n        <Container\n          id={id || \"react-kakao-maps-sdk-map-container\"}\n          {...props}\n          ref={container}\n        />\n        {map && (\n          <KakaoMapContext.Provider value={map}>\n            {children}\n          </KakaoMapContext.Provider>\n        )}\n      </>\n    )\n  }\n)\n\nexport default Map\n","import { useContext } from \"react\"\nimport { KakaoMapContext } from \"../components/Map\"\n\n/**\n * kakao map 객체를 가져오는 hook 입니다.\n * Map 객체 내부가 아니라면 Error를 발생 시킵니다.\n */\nconst useMap = (componentName?: string) => {\n  const kakaoMap = useContext(KakaoMapContext)\n  if (!kakaoMap) {\n    throw new Error(\n      `${\n        componentName ? componentName + \" Component\" : \"useMap\"\n      } must exist inside Map Component!`\n    )\n  }\n\n  return kakaoMap\n}\n\nexport default useMap\n","import React, {\n  useLayoutEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n} from \"react\"\nimport ReactDom from \"react-dom\"\n\ninterface InfoWindowProps {\n  map: kakao.maps.Map | kakao.maps.Roadview\n  position: kakao.maps.LatLng | kakao.maps.Viewpoint\n  marker?: kakao.maps.Marker\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부\n   * @default false\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n   */\n  range?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\nconst InfoWindow = React.forwardRef<\n  kakao.maps.InfoWindow,\n  React.PropsWithChildren<InfoWindowProps>\n>(\n  (\n    {\n      map,\n      position,\n      marker,\n      children,\n      altitude,\n      disableAutoPan,\n      range,\n      removable,\n      zIndex,\n      onCreate,\n    },\n    ref\n  ) => {\n    const container = useRef(document.createElement(\"div\"))\n\n    const infoWindow = useMemo(() => {\n      const kakaoInfoWindow = new kakao.maps.InfoWindow({\n        altitude: altitude,\n        disableAutoPan: disableAutoPan,\n        range: range,\n        removable: removable,\n        zIndex: zIndex,\n        content: container.current,\n        position: position,\n      })\n      container.current.style.display = \"none\"\n      return kakaoInfoWindow\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [disableAutoPan, removable])\n\n    useImperativeHandle(ref, () => infoWindow, [infoWindow])\n\n    useLayoutEffect(() => {\n      infoWindow.open(map, marker)\n      return () => {\n        infoWindow.close()\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [map, marker])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(infoWindow)\n    }, [infoWindow, onCreate])\n\n    useLayoutEffect(() => {\n      if (!infoWindow) return\n      infoWindow.setPosition(position)\n    }, [infoWindow, position])\n\n    useLayoutEffect(() => {\n      if (!infoWindow || !altitude) return\n      infoWindow.setAltitude(altitude)\n    }, [infoWindow, altitude])\n\n    useLayoutEffect(() => {\n      if (!infoWindow || !range) return\n      infoWindow.setRange(range)\n    }, [infoWindow, range])\n\n    useLayoutEffect(() => {\n      if (!infoWindow || !zIndex) return\n      infoWindow.setZIndex(zIndex)\n    }, [infoWindow, zIndex])\n\n    return (\n      container.current.parentElement &&\n      ReactDom.createPortal(children, container.current.parentElement)\n    )\n  }\n)\n\nexport default InfoWindow\n","import React, { useLayoutEffect, useImperativeHandle, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\nexport const KakaoMapMarkerClustererContext =\n  React.createContext<kakao.maps.MarkerClusterer>(\n    undefined as unknown as kakao.maps.MarkerClusterer\n  )\n\nexport interface MarkerClustererProps {\n  /**\n   * 클러스터의 격자 크기. 화면 픽셀 단위이며 해당 격자 영역 안에 마커가 포함되면 클러스터에 포함시킨다\n   * @default 60\n   */\n  gridSize?: number\n  /**\n   * 마커들의 좌표 평균을 클러스터 좌표 설정 여부\n   * @default false\n   */\n  averageCenter?: boolean\n  /**\n   * 클러스터링 할 지도의 최소 레벨 값. 지정한 숫자에 해당하는 레벨 미만에서는 클러스터링 하지 않는다\n   * @default 0\n   */\n  minLevel?: number\n  /**\n   * 클러스터링 할 최소 마커 수\n   * @default 2\n   */\n  minClusterSize?: number\n  /**\n   * 클러스터의 스타일. 여러개를 선언하면 calculator 로 구분된 사이즈 구간마다 서로 다른 스타일을 적용시킬 수 있다\n   */\n  styles?: React.CSSProperties[] | object[]\n  /**\n   * 클러스터에 표시할 문자열 또는 문자열 생성 함수.\n   * @default \"클러스터에 포함된 숫자\"\n   */\n  texts?: string[] | ((size: number) => string)\n  /**\n   * 클러스터 크기를 구분하는 값을 가진 배열 또는 구분값 생성함수\n   * @default [10, 100, 1000, 10000]\n   */\n  calculator?: number[] | ((size: number) => number[])\n  /**\n   * 클러스터 클릭 시 지도 확대 여부. true로 설정하면 클러스터 클릭 시 확대 되지 않는다\n   * @default false\n   */\n  disableClickZoom?: boolean\n  /**\n   * 클러스터 클릭 가능 여부 지정 옵션. false일 경우 클러스터의 clusterclick, clusterdblclick, clusterrightclick 이벤트가 발생하지 않으며, 커서가 변경되지 않는다.\n   * @default true\n   */\n  clickable?: boolean\n  /**\n   * 클러스터에 마우스 over/out 가능 여부 지정 옵션. false일 경우 클러스터의 clusterover, clusterout 이벤트가 발생하지 않는다.\n   * @default true\n   */\n  hoverable?: boolean\n\n  /**\n   * 클러스터 마커를 클릭 했을 때 발생한다.\n   * 이벤트 핸들러 함수 인자로는 Cluster 객체가 넘어온다.\n   * 클러스터 마커 클릭 시 지도가 줌인 되는 경우 원하는 Cluster 객체를 얻지 못할 수도 있다.\n   * 때문에 MarkerClusterer 를 생성할 때 disableClickZoom 옵션을 true로 설정하여\n   * 클러스터 마커를 클릭했을 때 지도가 줌인되지 않도록 설정 후 사용한다.\n   */\n  onClusterclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 마우스 오버 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 마우스 오버한 Cluster 객체가 넘어온다.\n   */\n  onClusterover?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 마우스 아웃 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 마우스 아웃된 Cluster 객체가 넘어온다.\n   */\n  onClusterout?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 더블클릭 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 더블클릭한 Cluster 객체가 넘어온다.\n   * MarkerClusterer 를 생성할 때 disableClickZoom 옵션을 true로 설정해야만 이벤트가 발생한다.\n   */\n  onClusterdblclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터 마커를 오른쪽 클릭 했을 때 발생한다\n   * 이벤트 핸들러 함수 인자로는 오른쪽 클릭한 Cluster 객체가 넘어온다.\n   */\n  onClusterrightclick?: (\n    target: kakao.maps.MarkerClusterer,\n    cluster: kakao.maps.Cluster\n  ) => void\n  /**\n   * 클러스터링이 완료됐을 때 발생한다.\n   * 이벤트 핸들러 함수 인자로는 생성된 Cluster 객체 전체가 배열로 넘어온다.\n   */\n  onClustered?: (\n    target: kakao.maps.MarkerClusterer,\n    clusters: kakao.maps.Cluster[]\n  ) => void\n  /**\n   * MarkerClusterer 생성 후 해당 객체를 전달하는 함수\n   */\n  onCreate?: (target: kakao.maps.MarkerClusterer) => void\n}\n\nconst MarkerClusterer = React.forwardRef<\n  kakao.maps.MarkerClusterer,\n  React.PropsWithChildren<MarkerClustererProps>\n>(\n  (\n    {\n      children,\n      averageCenter,\n      calculator,\n      clickable,\n      disableClickZoom,\n      gridSize,\n      hoverable,\n      minClusterSize,\n      minLevel,\n      styles,\n      texts,\n      onClusterclick,\n      onClusterdblclick,\n      onClustered,\n      onClusterout,\n      onClusterover,\n      onClusterrightclick,\n      onCreate,\n    },\n    ref\n  ) => {\n    const map = useMap(`MarkerClusterer`)\n    const markerCluster = useMemo(() => {\n      if (!window.kakao.maps.MarkerClusterer) {\n        console.warn(\n          \"clusterer 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\"\n        )\n        return\n      }\n      return new kakao.maps.MarkerClusterer({\n        averageCenter,\n        calculator,\n        clickable,\n        disableClickZoom,\n        gridSize,\n        hoverable,\n        minClusterSize,\n        minLevel,\n        styles,\n        texts,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => markerCluster!, [markerCluster])\n\n    useLayoutEffect(() => {\n      markerCluster?.setMap(map)\n    }, [map, markerCluster])\n\n    useLayoutEffect(() => {\n      if (markerCluster && onCreate) onCreate(markerCluster)\n    }, [markerCluster, onCreate])\n\n    useLayoutEffect(() => {\n      if (markerCluster && gridSize) {\n        markerCluster.setGridSize(gridSize)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, gridSize])\n\n    useLayoutEffect(() => {\n      if (markerCluster && minClusterSize) {\n        markerCluster.setMinClusterSize(minClusterSize)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, minClusterSize])\n\n    useLayoutEffect(() => {\n      if (markerCluster && typeof averageCenter !== \"undefined\") {\n        markerCluster.setAverageCenter(averageCenter)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, averageCenter])\n\n    useLayoutEffect(() => {\n      if (markerCluster && minLevel) {\n        markerCluster.setMinLevel(minLevel)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, minLevel])\n\n    useLayoutEffect(() => {\n      if (markerCluster && texts) {\n        markerCluster.setTexts(texts)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, texts])\n\n    useLayoutEffect(() => {\n      if (markerCluster && calculator) {\n        markerCluster.setCalculator(calculator)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, calculator])\n\n    useLayoutEffect(() => {\n      if (markerCluster && styles) {\n        markerCluster.setStyles(styles)\n        markerCluster.redraw()\n      }\n    }, [markerCluster, styles])\n\n    useKakaoEvent(markerCluster, \"clusterclick\", onClusterclick)\n    useKakaoEvent(markerCluster, \"clusterover\", onClusterover)\n    useKakaoEvent(markerCluster, \"clusterout\", onClusterout)\n    useKakaoEvent(markerCluster, \"clusterdblclick\", onClusterdblclick)\n    useKakaoEvent(markerCluster, \"clusterrightclick\", onClusterrightclick)\n    useKakaoEvent(markerCluster, \"clustered\", onClustered)\n\n    if (!markerCluster) {\n      return null\n    }\n\n    return (\n      <KakaoMapMarkerClustererContext.Provider value={markerCluster}>\n        {children}\n      </KakaoMapMarkerClustererContext.Provider>\n    )\n  }\n)\n\nexport default MarkerClusterer\n","import React, {\n  useContext,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n} from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport InfoWindow from \"./InfoWindow\"\nimport { KakaoMapMarkerClustererContext } from \"./MarkerClusterer\"\n\ninterface MarkerProps {\n  map: kakao.maps.Map | kakao.maps.Roadview\n  position: kakao.maps.LatLng | kakao.maps.Viewpoint\n\n  /**\n   * marker 생성 후 marker 객체를 전달하는 callback\n   */\n  onCreate?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * 마커의 이미지\n   */\n  image?: kakao.maps.MarkerImage\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 드래그 가능한 마커, 로드뷰에 올릴 경우에는 유효하지 않다.\n   */\n  draggable?: boolean\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * 로드뷰에 올라있는 마커의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 마커의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 마커는 로드뷰에서 보이지 않게 된다.\n   */\n  range?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n\n    /**\n     * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n     */\n    altitude?: number\n\n    /**\n     * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n     */\n    range?: number\n  }\n}\n\nconst Marker = React.forwardRef<\n  kakao.maps.Marker,\n  React.PropsWithChildren<MarkerProps>\n>(\n  (\n    {\n      map,\n      position,\n      children,\n      altitude,\n      clickable,\n      draggable,\n      image,\n      infoWindowOptions,\n      onCreate,\n      onClick,\n      onDragEnd,\n      onDragStart,\n      onMouseOut,\n      onMouseOver,\n      opacity,\n      range,\n      title,\n      zIndex,\n    },\n    ref\n  ) => {\n    const markerCluster = useContext(KakaoMapMarkerClustererContext)\n\n    // Marker 객체는 단 한번만 생성 되도록 함\n    const marker = useMemo(() => {\n      const kakaoMarker = new kakao.maps.Marker({\n        altitude,\n        clickable,\n        draggable,\n        image,\n        opacity,\n        range,\n        title,\n        zIndex,\n        position,\n      })\n\n      return kakaoMarker\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => marker, [marker])\n\n    useLayoutEffect(() => {\n      if (markerCluster) {\n        markerCluster.addMarker(marker)\n      } else {\n        marker.setMap(map)\n      }\n\n      return () => {\n        if (markerCluster) {\n          markerCluster.removeMarker(marker)\n        } else {\n          marker.setMap(null)\n        }\n      }\n    }, [map, markerCluster, marker])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(marker)\n    }, [marker, onCreate])\n\n    useKakaoEvent(marker, \"click\", onClick)\n    useKakaoEvent(marker, \"dragstart\", onDragStart)\n    useKakaoEvent(marker, \"dragend\", onDragEnd)\n    useKakaoEvent(marker, \"mouseout\", onMouseOut)\n    useKakaoEvent(marker, \"mouseover\", onMouseOver)\n\n    // position이 변경되면 객체를 갱신한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !position) return\n\n      marker.setPosition(position)\n    }, [map, marker, position])\n\n    // image 객체가 존재하면 이미지를 로드한다\n    useLayoutEffect(() => {\n      if (!map || !marker || !image) return\n\n      marker.setImage(image)\n    }, [map, marker, image])\n\n    // altitude 값이 있으면 높이를 조정한다\n    useLayoutEffect(() => {\n      if (!map || !marker || !altitude) return\n\n      marker.setAltitude(altitude)\n    }, [map, marker, altitude])\n\n    // clickable 값이 있으면 클릭이 가능하도록 한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || typeof clickable === \"undefined\") return\n\n      marker.setClickable(clickable)\n    }, [map, marker, clickable])\n\n    // draggable 값이 있으면 드래그가 가능하도록 한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || typeof draggable === \"undefined\") return\n\n      marker.setDraggable(draggable)\n    }, [map, marker, draggable])\n\n    // opacity 값이 있으면 투명도를 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !opacity) return\n\n      marker.setOpacity(opacity)\n    }, [map, marker, opacity])\n\n    // range 값이 있으면 마커의 가시반경을 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !range) return\n\n      marker.setRange(range)\n    }, [map, marker, range])\n\n    // title 값이 있으면 마커의 제목을 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !title) return\n\n      marker.setTitle(title)\n    }, [map, marker, title])\n\n    // zIndex 값이 있으면 마커의 zindex를 조절한다.\n    useLayoutEffect(() => {\n      if (!map || !marker || !zIndex) return\n\n      marker.setZIndex(zIndex)\n    }, [map, marker, zIndex])\n\n    if (children)\n      return (\n        <InfoWindow\n          position={position}\n          map={map}\n          marker={marker}\n          altitude={infoWindowOptions?.altitude}\n          disableAutoPan={infoWindowOptions?.disableAutoPan}\n          range={infoWindowOptions?.range}\n          removable={infoWindowOptions?.removable}\n          zIndex={infoWindowOptions?.zIndex}\n        >\n          {children}\n        </InfoWindow>\n      )\n\n    return null\n  }\n)\n\nexport default Marker\n","import React, { useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\nimport Marker from \"./Marker\"\n\nexport interface MapMarkerProps {\n  /**\n   * 표시 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n\n  image?: {\n    /**\n     * 표시 이미지 src\n     */\n    src: string\n\n    /**\n     * 표시 이미지 크기\n     */\n    size: {\n      width: number\n      height: number\n    }\n\n    options?: {\n      /**\n       * 마커 이미지의 alt 속성값을 정의한다.\n       */\n      alt?: string\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역을 표현하는 좌표값\n       */\n      coords?: string\n\n      /**\n       * 마커의 좌표에 일치시킬 이미지 안의 좌표 (기본값: 이미지의 가운데 아래)\n       */\n      offset?: { x: number; y: number }\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역의 모양\n       */\n      shape?: \"default\" | \"rect\" | \"circle\" | \"poly\"\n\n      /**\n       * 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n       */\n      spriteOrigin?: { x: number; y: number }\n\n      /**\n       * 스프라이트 이미지의 전체 크기\n       */\n      spriteSize?: { width: number; height: number }\n    }\n  }\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * Maker 생성 이벤트 핸들러\n   */\n  onCreate?: (maker: kakao.maps.Marker) => void\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 드래그 가능한 마커, 로드뷰에 올릴 경우에는 유효하지 않다.\n   */\n  draggable?: boolean\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n  }\n}\n\n/**\n * Map에서 Marker를 생성할 때 사용 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `maker` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst MapMarker = React.forwardRef<\n  kakao.maps.Marker,\n  React.PropsWithChildren<MapMarkerProps>\n>(\n  (\n    {\n      image,\n      position,\n      children,\n      clickable,\n      draggable,\n      infoWindowOptions,\n      onClick,\n      onDragEnd,\n      onDragStart,\n      onMouseOut,\n      onMouseOver,\n      onCreate,\n      opacity,\n      title,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`MapMarker`)\n\n    const markerImage = useMemo(() => {\n      return (\n        image &&\n        new kakao.maps.MarkerImage(\n          image.src,\n          new kakao.maps.Size(image.size.width, image.size.height),\n          {\n            alt: image.options?.alt,\n            coords: image.options?.coords,\n            offset:\n              image.options?.offset &&\n              new kakao.maps.Point(\n                image.options?.offset.x,\n                image.options?.offset.y\n              ),\n            shape: image.options?.shape,\n            spriteOrigin:\n              image.options?.spriteOrigin &&\n              new kakao.maps.Point(\n                image.options?.spriteOrigin.x,\n                image.options?.spriteOrigin.y\n              ),\n            spriteSize:\n              image.options?.spriteSize &&\n              new kakao.maps.Size(\n                image.options?.spriteSize.width,\n                image.options?.spriteSize.height\n              ),\n          }\n        )\n      )\n    }, [image])\n\n    const markerPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      return new kakao.maps.Coords(position.x, position.y).toLatLng()\n\n      // @ts-ignore\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [position.lat, position.lng, position.x, position.y])\n\n    return (\n      <Marker\n        map={map}\n        position={markerPosition}\n        image={markerImage}\n        clickable={clickable}\n        draggable={draggable}\n        infoWindowOptions={infoWindowOptions}\n        onClick={onClick}\n        onDragEnd={onDragEnd}\n        onDragStart={onDragStart}\n        onMouseOut={onMouseOut}\n        onMouseOver={onMouseOver}\n        onCreate={onCreate}\n        opacity={opacity}\n        title={title}\n        zIndex={zIndex}\n        ref={ref}\n      >\n        {children}\n      </Marker>\n    )\n  }\n)\n\nexport default MapMarker\n","import React, { useMemo } from \"react\"\nimport InfoWindow from \"./InfoWindow\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapInfoWindowProps {\n  /**\n   * Contianer id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * Contianer className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * Contianer style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 인포윈도가 표시될 위치\n   */\n  position: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\n/**\n * Map 컴포넌트에서 InfoWindow를 그릴 때 사용됩니다.\n * `onCreate` 이벤트를 통해 생성 후 `infoWindow` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst MapInfoWindow = React.forwardRef<\n  kakao.maps.InfoWindow,\n  React.PropsWithChildren<MapInfoWindowProps>\n>(\n  (\n    { position, children, disableAutoPan, removable, zIndex, onCreate },\n    ref\n  ) => {\n    const map = useMap(`MapInfoWindow`)\n    const infoPosition = useMemo(() => {\n      return new kakao.maps.LatLng(position.lat, position.lng)\n    }, [position.lat, position.lng])\n\n    return (\n      <InfoWindow\n        disableAutoPan={disableAutoPan}\n        removable={removable}\n        zIndex={zIndex}\n        map={map}\n        position={infoPosition}\n        onCreate={onCreate}\n        ref={ref}\n      >\n        {children}\n      </InfoWindow>\n    )\n  }\n)\n\nexport default MapInfoWindow\n","import React, {\n  useContext,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from \"react\"\nimport ReactDOM from \"react-dom\"\nimport useMap from \"../hooks/useMap\"\nimport { KakaoMapMarkerClustererContext } from \"./MarkerClusterer\"\n\nexport interface CustomOverlayMapProps {\n  /**\n   * 커스텀 오버레이의 좌표\n   */\n  position: {\n    lat: number\n    lng: number\n  }\n  /**\n   * true 로 설정하면 컨텐츠 영역을 클릭했을 경우 지도 이벤트를 막아준다.\n   */\n  clickable?: boolean\n\n  /**\n   * 컨텐츠의 x축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  xAnchor?: number\n\n  /**\n   * 컨텐츠의 y축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  yAnchor?: number\n\n  /**\n   * 커스텀 오버레이의 z-index\n   */\n  zIndex?: number\n\n  /**\n   * 커스텀 오버레이를 생성 후 해당 객체를 가지고 callback 함수를 실행 시켜줌\n   */\n  onCreate?: (customOverlay: kakao.maps.CustomOverlay) => void\n}\n\n/**\n * Map에 CustomOverlay를 올릴 때 사용하는 컴포넌트 입니다.\n * `onCreate` 이벤트 또는 `ref` 객체를 통해서 `CustomOverlay` 객체에 직접 접근 및 초기 설정 작업을 지정할 수 있습니다.\n */\nconst CustomOverlayMap = React.forwardRef<\n  kakao.maps.CustomOverlay,\n  React.PropsWithChildren<CustomOverlayMapProps>\n>(\n  (\n    { position, children, clickable, xAnchor, yAnchor, zIndex, onCreate },\n    ref\n  ) => {\n    const markerCluster = useContext(KakaoMapMarkerClustererContext)\n\n    const map = useMap(`CustomOverlayMap`)\n    const container = useRef(document.createElement(\"div\"))\n\n    const overlayPosition = useMemo(() => {\n      return new kakao.maps.LatLng(position.lat, position.lng)\n    }, [position.lat, position.lng])\n\n    const overlay = useMemo(() => {\n      const KakaoCustomOverlay = new kakao.maps.CustomOverlay({\n        clickable: clickable,\n        xAnchor: xAnchor,\n        yAnchor: yAnchor,\n        zIndex: zIndex,\n        position: overlayPosition,\n        content: container.current,\n      })\n      container.current.style.display = \"none\"\n\n      return KakaoCustomOverlay\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [clickable, xAnchor, yAnchor])\n\n    useImperativeHandle(ref, () => overlay, [overlay])\n\n    useLayoutEffect(() => {\n      if (!map) return\n\n      if (markerCluster) {\n        markerCluster.addMarker(overlay)\n      } else {\n        overlay.setMap(map)\n      }\n\n      return () => {\n        if (markerCluster) {\n          markerCluster.removeMarker(overlay)\n        } else {\n          overlay.setMap(null)\n        }\n      }\n    }, [map, markerCluster, overlay])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(overlay)\n    }, [overlay, onCreate])\n\n    useLayoutEffect(() => {\n      overlay.setPosition(overlayPosition)\n    }, [overlay, overlayPosition])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      overlay.setZIndex(zIndex)\n    }, [overlay, zIndex])\n\n    return (\n      container.current.parentElement &&\n      ReactDOM.createPortal(children, container.current.parentElement)\n    )\n  }\n)\n\nexport default CustomOverlayMap\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapTypeControlProps {\n  /**\n   * MapTypeControl의 Position를 정의 한다.\n   */\n  position?: kakao.maps.ControlPosition\n}\n\n/**\n * 일반 지도/하이브리드 간 지도 타입 전환 컨트롤을 생성한다.\n * 현재는 일반 지도/하이브리드 간 전환 컨트롤만 지원되며 다른 지도 타입을 제어하는 컨트롤이 필요할 경우에는 직접 구현해야 한다.\n */\nconst MapTypeControl = React.forwardRef<\n  kakao.maps.MapTypeControl,\n  MapTypeControlProps\n>(({ position = kakao.maps.ControlPosition.TOPRIGHT }, ref) => {\n  const map = useMap(`MapTypeControl`)\n\n  const mapTypeControl = useMemo(() => {\n    return new kakao.maps.MapTypeControl()\n  }, [])\n\n  useImperativeHandle(ref, () => mapTypeControl, [mapTypeControl])\n\n  useLayoutEffect(() => {\n    map.addControl(mapTypeControl, position)\n\n    return () => {\n      map.removeControl(mapTypeControl)\n    }\n  }, [map, mapTypeControl, position])\n\n  return null\n})\n\nexport default MapTypeControl\n","import React, { useEffect, useImperativeHandle, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface ZoomControlProps {\n  /**\n   * ZoomControl의 Position를 정의 한다.\n   */\n  position?: kakao.maps.ControlPosition\n}\n\n/**\n * 확대·축소 컨트롤을 생성한다.\n */\nconst ZoomControl = React.forwardRef<kakao.maps.ZoomControl, ZoomControlProps>(\n  ({ position = kakao.maps.ControlPosition.RIGHT }, ref) => {\n    const map = useMap(`ZoomControl`)\n\n    const ZoomControl = useMemo(() => {\n      return new kakao.maps.ZoomControl()\n    }, [])\n\n    useImperativeHandle(ref, () => ZoomControl, [ZoomControl])\n\n    useEffect(() => {\n      map.addControl(ZoomControl, position)\n\n      return () => {\n        map.removeControl(ZoomControl)\n      }\n\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [map, position])\n\n    return null\n  }\n)\n\nexport default ZoomControl\n","import React, { useEffect } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface MapTypeIdProps {\n  /**\n   * MapTypeId를 정의 한다.\n   */\n  type: kakao.maps.MapTypeId\n}\n\n/**\n * 추가적으로 보이고 싶은 지도 타입을 추가 할 때 사용한다.\n */\nconst MapTypeId: React.FC<MapTypeIdProps> = ({ type }) => {\n  const map = useMap(`MapTypeId`)\n\n  useEffect(() => {\n    map.addOverlayMapTypeId(type)\n\n    return () => {\n      map.removeOverlayMapTypeId(type)\n    }\n  }, [map, type])\n\n  return null\n}\n\nexport default MapTypeId\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface CircleProps {\n  /**\n   * 중심 좌표를 지정합니다.\n   */\n  center: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 원의 반지름 크기를 지정합니다 (미터 단위).\n   */\n  radius: number\n\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 원의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 원에 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 원에서 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원에서 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원에서 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 원을 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Circle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Circle) => void\n}\n\n/**\n * Map 상에 원을 그립니다.\n */\nconst Circle = React.forwardRef<kakao.maps.Circle, CircleProps>(\n  (\n    {\n      center,\n      radius,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n      onMouseover,\n      onMouseout,\n      onMousemove,\n      onMousedown,\n      onClick,\n      onCreate,\n    },\n    ref\n  ) => {\n    const map = useMap(`Circle`)\n\n    const circleCenter = useMemo(() => {\n      return new kakao.maps.LatLng(center.lat, center.lng)\n    }, [center.lat, center.lng])\n\n    const circle = useMemo(() => {\n      return new kakao.maps.Circle({\n        center: circleCenter,\n        radius,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => circle, [circle])\n\n    useLayoutEffect(() => {\n      circle.setMap(map)\n      return () => {\n        circle.setMap(null)\n      }\n    }, [map, circle])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(circle)\n    }, [circle, onCreate])\n\n    useLayoutEffect(() => {\n      if (circle) circle.setPosition(circleCenter)\n    }, [circle, circleCenter])\n\n    useLayoutEffect(() => {\n      circle.setRadius(radius)\n    }, [circle, radius])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      circle.setZIndex(zIndex)\n    }, [circle, zIndex])\n\n    useLayoutEffect(() => {\n      circle.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      circle,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useKakaoEvent(circle, \"mouseover\", onMouseover)\n    useKakaoEvent(circle, \"mouseout\", onMouseout)\n    useKakaoEvent(circle, \"mousemove\", onMousemove)\n    useKakaoEvent(circle, \"mousedown\", onMousedown)\n    useKakaoEvent(circle, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Circle\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface PolylineProps {\n  path: LatLng[] | LatLng[][]\n  /**\n   * 화살표 여부\n   */\n  endArrow?: boolean\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Polyline,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Polyline) => void\n}\n\n/**\n * Map 상에 폴리라인을 그립니다.\n */\nconst Polyline = React.forwardRef<kakao.maps.Polyline, PolylineProps>(\n  (\n    {\n      path,\n      endArrow,\n      onClick,\n      onMousedown,\n      onMousemove,\n      onMouseout,\n      onMouseover,\n      onCreate,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`Polyline`)\n\n    const polyLinePath = useMemo(() => {\n      if ((path as LatLng[]).every((v) => v instanceof Array)) {\n        return (path as LatLng[][]).map((v) => {\n          return v.map((p) => new kakao.maps.LatLng(p.lat, p.lng))\n        })\n      }\n      return (path as LatLng[]).map((v) => {\n        return new kakao.maps.LatLng(v.lat, v.lng)\n      })\n    }, [path])\n\n    const polyline = useMemo(() => {\n      return new kakao.maps.Polyline({\n        path: polyLinePath,\n        endArrow,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => polyline, [polyline])\n\n    useLayoutEffect(() => {\n      polyline.setMap(map)\n      return () => polyline.setMap(null)\n    }, [map, polyline])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(polyline)\n    }, [polyline, onCreate])\n\n    useLayoutEffect(() => {\n      polyline.setOptions({\n        endArrow,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      polyline,\n      endArrow,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useLayoutEffect(() => {\n      polyline.setPath(polyLinePath)\n    }, [polyline, polyLinePath])\n\n    useLayoutEffect(() => {\n      if (zIndex) polyline.setZIndex(zIndex)\n    }, [polyline, zIndex])\n\n    useKakaoEvent(polyline, \"mouseover\", onMouseover)\n    useKakaoEvent(polyline, \"mouseout\", onMouseout)\n    useKakaoEvent(polyline, \"mousemove\", onMousemove)\n    useKakaoEvent(polyline, \"mousedown\", onMousedown)\n    useKakaoEvent(polyline, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Polyline\n","import React, { useLayoutEffect, useImperativeHandle, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface PolygonProps {\n  path: LatLng[] | LatLng[][]\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Polygon,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Polygon) => void\n}\n\n/**\n * Map 상에 다각형을 그립니다.\n */\nconst Polygon = React.forwardRef<kakao.maps.Polygon, PolygonProps>(\n  (\n    {\n      path,\n      onClick,\n      onMousedown,\n      onMousemove,\n      onMouseout,\n      onMouseover,\n      onCreate,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`Polygon`)\n\n    const polygonPath = useMemo(() => {\n      if ((path as LatLng[]).every((v) => v instanceof Array)) {\n        return (path as LatLng[][]).map((v) => {\n          return v.map((p) => new kakao.maps.LatLng(p.lat, p.lng))\n        })\n      }\n      return (path as LatLng[]).map((v) => {\n        return new kakao.maps.LatLng(v.lat, v.lng)\n      })\n    }, [path])\n\n    const polygon = useMemo(() => {\n      return new kakao.maps.Polygon({\n        path: polygonPath,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => polygon, [polygon])\n\n    useLayoutEffect(() => {\n      polygon.setMap(map)\n      return () => polygon.setMap(null)\n    }, [map, polygon])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(polygon)\n    }, [polygon, onCreate])\n\n    useLayoutEffect(() => {\n      polygon.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      polygon,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useLayoutEffect(() => {\n      polygon.setPath(polygonPath)\n    }, [polygon, polygonPath])\n\n    useLayoutEffect(() => {\n      if (zIndex) polygon.setZIndex(zIndex)\n    }, [polygon, zIndex])\n\n    useKakaoEvent(polygon, \"mouseover\", onMouseover)\n    useKakaoEvent(polygon, \"mouseout\", onMouseout)\n    useKakaoEvent(polygon, \"mousemove\", onMousemove)\n    useKakaoEvent(polygon, \"mousedown\", onMousedown)\n    useKakaoEvent(polygon, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Polygon\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\ninterface LatLng {\n  lat: number\n  lng: number\n}\n\nexport interface RectangleProps {\n  bounds: {\n    sw: LatLng\n    ne: LatLng\n  }\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n  /**\n   * 선의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Rectangle,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Rectangle) => void\n}\n\n/**\n * Map 상에 사각형을 그립니다.\n */\nconst Rectangle = React.forwardRef<kakao.maps.Rectangle, RectangleProps>(\n  (\n    {\n      bounds,\n      onClick,\n      onMousedown,\n      onMousemove,\n      onMouseout,\n      onMouseover,\n      onCreate,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      fillColor,\n      fillOpacity,\n      zIndex,\n    },\n    ref\n  ) => {\n    const map = useMap(`Rectangle`)\n\n    const rectangleBounds = useMemo(() => {\n      return new kakao.maps.LatLngBounds(\n        new kakao.maps.LatLng(bounds.sw.lat, bounds.sw.lng),\n        new kakao.maps.LatLng(bounds.ne.lat, bounds.ne.lng)\n      )\n    }, [bounds])\n\n    const rectangle = useMemo(() => {\n      return new kakao.maps.Rectangle({\n        bounds: rectangleBounds,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => rectangle, [rectangle])\n\n    useLayoutEffect(() => {\n      rectangle.setMap(map)\n      return () => rectangle.setMap(null)\n    }, [map, rectangle])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(rectangle)\n    }, [rectangle, onCreate])\n\n    useLayoutEffect(() => {\n      rectangle.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      rectangle,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useLayoutEffect(() => {\n      rectangle.setBounds(rectangleBounds)\n    }, [rectangle, rectangleBounds])\n\n    useLayoutEffect(() => {\n      if (zIndex) rectangle.setZIndex(zIndex)\n    }, [rectangle, zIndex])\n\n    useKakaoEvent(rectangle, \"mouseover\", onMouseover)\n    useKakaoEvent(rectangle, \"mouseout\", onMouseout)\n    useKakaoEvent(rectangle, \"mousemove\", onMousemove)\n    useKakaoEvent(rectangle, \"mousedown\", onMousedown)\n    useKakaoEvent(rectangle, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Rectangle\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface EllipseProps {\n  /**\n   * 중심 좌표를 지정합니다.\n   */\n  center: {\n    lat: number\n    lng: number\n  }\n  /**\n   * 미터 단위의 x축 반지름\n   */\n  rx: number\n\n  /**\n   * 미터 단위의 y축 반지름\n   */\n  ry: number\n\n  /**\n   * #xxxxxx 형태의 채움 색 (기본값: ‘#F10000’)\n   */\n  fillColor?: string\n\n  /**\n   * 채움 불투명도 (0-1) (기본값: 0)\n   */\n  fillOpacity?: number\n\n  /**\n   * 픽셀 단위의 선 두께 (기본값: 3)\n   */\n  strokeWeight?: number\n\n  /**\n   * #xxxxxx 형태의 선 색 (기본값: ‘#F10000’)\n   */\n  strokeColor?: string\n\n  /**\n   * 선 불투명도 (0-1) (기본값: 0.6)\n   */\n  strokeOpacity?: number\n\n  /**\n   * 선 스타일 (기본값: ‘solid’)\n   */\n  strokeStyle?: kakao.maps.StrokeStyles\n\n  /**\n   * 타원의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 타원에 마우스 커서를 올리면 발생한다.\n   */\n  onMouseover?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 마우스 커서가 타원에서 벗어나면 발생한다.\n   */\n  onMouseout?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원에서 마우스를 움직이면 발생한다.\n   */\n  onMousemove?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원에서 마우스 버튼을 누르면 발생한다.\n   */\n  onMousedown?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n  /**\n   * 타원을 클릭하면 발생한다.\n   */\n  onClick?: (\n    target: kakao.maps.Ellipse,\n    mouseEvent: kakao.maps.event.MouseEvent\n  ) => void\n\n  /**\n   * 객체 생성시 호출 됩니다.\n   */\n  onCreate?: (target: kakao.maps.Ellipse) => void\n}\n\n/**\n * Map 상에 타원을 그립니다.\n */\nconst Ellipse = React.forwardRef<kakao.maps.Ellipse, EllipseProps>(\n  (\n    {\n      center,\n      rx,\n      ry,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n      zIndex,\n      onMouseover,\n      onMouseout,\n      onMousemove,\n      onMousedown,\n      onClick,\n      onCreate,\n    },\n    ref\n  ) => {\n    const map = useMap(`Ellipse`)\n\n    const ellipseCenter = useMemo(() => {\n      return new kakao.maps.LatLng(center.lat, center.lng)\n    }, [center.lat, center.lng])\n\n    const ellipse = useMemo(() => {\n      return new kakao.maps.Ellipse({\n        center: ellipseCenter,\n        rx,\n        ry,\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n        zIndex,\n      })\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [])\n\n    useImperativeHandle(ref, () => ellipse, [ellipse])\n\n    useLayoutEffect(() => {\n      ellipse.setMap(map)\n\n      return () => {\n        ellipse.setMap(null)\n      }\n    }, [map, ellipse])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(ellipse)\n    }, [ellipse, onCreate])\n\n    useLayoutEffect(() => {\n      if (ellipse) ellipse.setPosition(ellipseCenter)\n    }, [ellipse, ellipseCenter])\n\n    useLayoutEffect(() => {\n      ellipse.setRadius(rx, ry)\n    }, [ellipse, rx, ry])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      ellipse.setZIndex(zIndex)\n    }, [ellipse, zIndex])\n\n    useLayoutEffect(() => {\n      ellipse.setOptions({\n        fillColor,\n        fillOpacity,\n        strokeColor,\n        strokeOpacity,\n        strokeStyle,\n        strokeWeight,\n      })\n    }, [\n      ellipse,\n      fillColor,\n      fillOpacity,\n      strokeColor,\n      strokeOpacity,\n      strokeStyle,\n      strokeWeight,\n    ])\n\n    useKakaoEvent(ellipse, \"mouseover\", onMouseover)\n    useKakaoEvent(ellipse, \"mouseout\", onMouseout)\n    useKakaoEvent(ellipse, \"mousemove\", onMousemove)\n    useKakaoEvent(ellipse, \"mousedown\", onMousedown)\n    useKakaoEvent(ellipse, \"click\", onClick)\n\n    return null\n  }\n)\n\nexport default Ellipse\n","import React, { useImperativeHandle, useLayoutEffect, useMemo } from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport interface AbstractOverlayProps {\n  /**\n   * AbstractOverlay에서 필요한 `onAdd` 함수를 구현 합니다.\n   * 위치를 재조정할 필요가 있을 때 호출된다.\n   * 이 함수 내에서 엘리먼트의 위치를 잡아주어야 한다.\n   *\n   * 이때 arrow 함수가 아닌 일반 funtion으로 하여 this 바인딩이 되도록 하여 AbstractOverlay를 상속 받은 객체에 접근하여 필요 기능을 정의 합니다.\n   * ```tsx\n   * const panel = (this as kakao.maps.AbstractOverlay).getPanels().overlayLayer\n   * panel.appendChild(node.current)\n   * ```\n   */\n  draw: () => void\n  /**\n   * 지도에 올릴 때 호출된다.\n   * setMap(map) 을 실행하면 이 함수가 실행된다.\n   * 이 함수 내에서 생성된 `DOM` 객체를 MapPanels에 자식 노드로 넣어주도록 한다.\n   *\n   * ```tsx\n   * var projection = this.getProjection()\n   * var point = projection.pointFromCoords(positionLatlng)\n   * var width = node.current.offsetWidth\n   * var height = node.current.offsetHeight\n   *\n   * console.log(point, width, height)\n   *\n   * node.current.style.left = point.x - width / 2 + \"px\"\n   * node.current.style.top = point.y - height / 2 + \"px\"\n   * ```\n   */\n  onAdd: () => void\n\n  /**\n   * 지도에서 제거할 때 호출된다.\n   * setMap(null) 을 실행하면 이 함수가 실행된다.\n   * 이 함수 내에서 MapPanels에 자식 노드로 넣어준 엘리먼트를 제거하도록 한다.\n   *\n   * ```tsx\n   * this.node.parentNode.removeChild(this.node);\n   * ```\n   */\n  onRemove: () => void\n\n  /**\n   * 생성된 kakao.maps.AbstractOverlay 객체를 받을 수 있는 CallBack 함수 입니다.\n   */\n  onCreate?: (target: kakao.maps.AbstractOverlay) => void\n}\n\n/**\n * `API` 사용자가 직접 정의할 수 있는 오버레이.\n * AbstractOverlay를 상속 받아 사용할 객체를 생성하고 prototype을 연결해 준다.\n * 온전히 동작하는 오버레이를 만들고자 한다면 3가지 인터페이스 메소드( onAdd, draw, onRemove )를 구현해야 한다.\n *\n * 해당 Component 내부에서 `ReactAbstractOveraly` class를 만들어 `onAdd`, `draw`, `onRemove` 를 연결한 후 React Life Cycle에 맞춰 `setMap` 를 자동으로 호출 합니다.\n *\n * *경고* `draw`, `onAdd`, `onRemove` 의 경우 반드시 익명함수가 **아닌** 형태로 만들어서 전달해야 합니다.\n * `this.~` 를 통한 접근이 가능하니 해당 부분을 이용해서 구현 해주세요!\n *\n * ### Example Code\n *\n * ```jsx live\n * function () {\n *  const TooltipMarker = ({\n *    position,\n *  }) => {\n *    const node = useRef(document.createElement(\"div\"))\n *\n *    const positionLatlng = useMemo(() => {\n *      return new kakao.maps.LatLng(position.lat, position.lng)\n *    }, [position.lat, position.lng])\n *\n *    function onAdd() {\n *      const panel = this.getPanels()\n *        .overlayLayer\n *      panel.appendChild(node.current)\n *    }\n *\n *    function onRemove() {\n *      node.current.parentNode.removeChild(node.current)\n *    }\n *\n *    function draw() {\n *      var projection = this.getProjection()\n *      var point = projection.pointFromCoords(positionLatlng)\n *      var width = node.current.offsetWidth\n *      var height = node.current.offsetHeight\n *\n *      console.log(point, width, height)\n *\n *      node.current.style.left = point.x - width / 2 + \"px\"\n *      node.current.style.top = point.y - height / 2 + \"px\"\n *    }\n *\n *    useEffect(() => {\n *      node.current.style.position = \"absolute\"\n *      node.current.style.whiteSpace = \"nowrap\"\n *    }, [])\n *\n *    return (\n *      <>\n *        <AbstractOverlay onAdd={onAdd} onRemove={onRemove} draw={draw} />\n *        {ReactDOM.createPortal(\n *          <div\n *            style={{\n *              color: \"#000\",\n *              backgroundColor: \"#fff\",\n *              padding: \"5px\",\n *              borderRadius: \"15px\",\n *            }}\n *          >\n *            Hello Marker!\n *          </div>,\n *          node.current\n *        )}\n *      </>\n *    )\n *  }\n *\n *  return (\n *    <>\n *      <Map // 지도를 표시할 Container\n *        center={{\n *          // 지도의 중심좌표\n *          lat: 37.54699,\n *          lng: 127.09598,\n *        }}\n *        style={{\n *          // 지도의 크기\n *          width: \"100%\",\n *          height: \"450px\",\n *        }}\n *        level={3} // 지도의 확대 레벨\n *      >\n *        <TooltipMarker\n *          position={{\n *            lat: 37.54699,\n *            lng: 127.09598,\n *          }}\n *        />\n *      </Map>\n *    </>\n *  )\n *}\n * ```\n */\nconst AbstractOverlay = React.forwardRef<\n  kakao.maps.AbstractOverlay,\n  AbstractOverlayProps\n>(({ draw, onAdd, onRemove, onCreate }, ref) => {\n  const map = useMap()\n\n  const reactAbstractOverlay = useMemo(() => {\n    class ReactAbstractOveraly extends kakao.maps.AbstractOverlay {\n      constructor(draw: () => void, onAdd: () => void, onRemove: () => void) {\n        super()\n        this.draw = draw\n        this.onAdd = onAdd\n        this.onRemove = onRemove\n      }\n    }\n    const overlay = new ReactAbstractOveraly(draw, onAdd, onRemove)\n    return overlay\n  }, [draw, onAdd, onRemove])\n\n  useImperativeHandle(ref, () => reactAbstractOverlay, [reactAbstractOverlay])\n\n  useLayoutEffect(() => {\n    reactAbstractOverlay.setMap(map)\n\n    return () => {\n      reactAbstractOverlay.setMap(null)\n    }\n  }, [map, reactAbstractOverlay])\n\n  useLayoutEffect(() => {\n    if (onCreate) onCreate(reactAbstractOverlay)\n  }, [reactAbstractOverlay, onCreate])\n\n  return null\n})\n\nexport default AbstractOverlay\n","import React, { useImperativeHandle, useRef, useState } from \"react\"\nimport useIsomorphicLayoutEffect from \"../hooks/useIsomorphicLayoutEffect\"\nimport useKakaoEvent from \"../hooks/useKakaoEvent\"\nimport {\n  PolymorphicComponentProps,\n  PolymorphicComponentPropsWithOutRef,\n} from \"../types\"\nimport { Loader } from \"../util/kakaoMapApiLoader\"\n\nexport const KakaoRoadviewContext = React.createContext<kakao.maps.Roadview>(\n  undefined as unknown as kakao.maps.Roadview\n)\n\nexport interface RoadviewProps {\n  /**\n   * 중심으로 설정할 위치 입니다.\n   * 해당 lat와 lng에 해당하는 radius범위 안에서 가장가까운 Roadview을 선택합니다.\n   * 만약 없다면 lat, lng로 설정 됩니다.\n   */\n  position: {\n    lat: number\n    lng: number\n    radius: number\n  }\n\n  /**\n   * 로드뷰 시작 지역의 고유 아이디 값.\n   */\n  panoId?: number\n\n  /**\n   * panoId가 유효하지 않을 경우 지도좌표를 기반으로 데이터를 요청할 수평 좌표값.\n   */\n  panoX?: number\n\n  /**\n   * panoId가 유효하지 않을 경우 지도좌표를 기반으로 데이터를 요청할 수직 좌표값.\n   */\n  panoY?: number\n\n  /**\n   * 로드뷰 처음 실행시에 바라봐야 할 수평 각. 0이 정북방향. (0_360)\n   */\n  pan?: number\n\n  /**\n   * 로드뷰 처음 실행시에 바라봐야 할 수직 각.(-90_90)\n   */\n  tilt?: number\n\n  /**\n   * 로드뷰 줌 초기값.(-3_3)\n   */\n  zoom?: number\n\n  /**\n   * 로드뷰 생성후 해당 객체를 전달하는 callback.\n   */\n  onCreate?: (roadview: kakao.maps.Roadview) => void\n\n  /**\n   * 로드뷰가 초기화를 끝내면 발생한다.\n   */\n  onInit?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 파노라마 ID가 바뀌면 발생한다.\n   */\n  onPanoidChange?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 시점이 바뀌면 발생한다.\n   */\n  onViewpointChange?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * 지도 좌표가 바뀌면 발생한다.\n   */\n  onPositionChanged?: (target: kakao.maps.Roadview) => void\n\n  /**\n   * getNearestPanoId 동작 실패시 호출 합니다.\n   */\n  onErrorGetNearestPanoId?: (target: kakao.maps.Roadview) => void\n}\n\ntype RoadviewComponent = <T extends React.ElementType = \"div\">(\n  props: PolymorphicComponentPropsWithOutRef<T, RoadviewProps> &\n    React.RefAttributes<kakao.maps.Roadview>\n) => React.ReactElement | null\n\n/**\n * Roadview를 Roadview를 생성하는 컴포넌트 입니다.\n * props로 받는 `on*` 이벤트는 해당 `kakao.maps.Map` 객체를 반환 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `Roadview` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst Roadview: RoadviewComponent = React.forwardRef(\n  <T extends React.ElementType = \"div\">(\n    {\n      id,\n      as,\n      children,\n      position,\n      pan,\n      panoId,\n      panoX,\n      panoY,\n      tilt,\n      zoom,\n      onCreate,\n      onInit,\n      onPanoidChange,\n      onPositionChanged,\n      onViewpointChange,\n      onErrorGetNearestPanoId,\n      ...props\n    }: PolymorphicComponentProps<T, React.PropsWithChildren<RoadviewProps>>,\n    ref: React.ForwardedRef<kakao.maps.Roadview>\n  ) => {\n    const Container = as || \"div\"\n    const [isLoaded, setIsLoaded] = useState(false)\n    const [isLoading, setIsLoading] = useState(true)\n    const [roadview, setRoadview] = useState<kakao.maps.Roadview>()\n    const container = useRef<HTMLDivElement>(null)\n\n    useIsomorphicLayoutEffect(() => {\n      Loader.isLoaded().then(setIsLoaded)\n    }, [])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!isLoaded) return\n\n      const RoadviewContainer = container.current\n\n      if (!RoadviewContainer) return\n\n      const kakaoRoadview = new kakao.maps.Roadview(RoadviewContainer, {\n        pan: pan,\n        panoId: panoId,\n        panoX: panoX,\n        panoY: panoY,\n        tilt: tilt,\n        zoom: zoom,\n      })\n\n      setRoadview(kakaoRoadview)\n\n      return () => {\n        RoadviewContainer.innerHTML = \"\"\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isLoaded, panoX, panoY, zoom])\n\n    useImperativeHandle(ref, () => roadview!, [roadview])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!roadview || !onCreate) return\n      onCreate(roadview)\n    }, [roadview, onCreate])\n\n    useIsomorphicLayoutEffect(() => {\n      if (\n        !roadview ||\n        panoId ||\n        (roadview.getPosition().getLat() === position.lat &&\n          roadview.getPosition().getLng() === position.lng)\n      )\n        return\n\n      const newPostion = new kakao.maps.LatLng(position.lat, position.lng)\n\n      new kakao.maps.RoadviewClient().getNearestPanoId(\n        newPostion,\n        position.radius,\n        (panoId) => {\n          if (panoId === null && onErrorGetNearestPanoId) {\n            onErrorGetNearestPanoId(roadview)\n          } else {\n            roadview.setPanoId(panoId, newPostion)\n          }\n        }\n      )\n    }, [\n      roadview,\n      panoId,\n      position.lat,\n      position.lng,\n      position.radius,\n      onErrorGetNearestPanoId,\n    ])\n\n    useIsomorphicLayoutEffect(() => {\n      if (\n        !roadview ||\n        !panoId ||\n        panoId === roadview.getPanoId() ||\n        (roadview.getPosition().getLat() === position.lat &&\n          roadview.getPosition().getLng() === position.lng)\n      )\n        return\n\n      const newPostion = new kakao.maps.LatLng(position.lat, position.lng)\n      roadview.setPanoId(panoId, newPostion)\n    }, [roadview, panoId, position.lat, position.lng])\n\n    useIsomorphicLayoutEffect(() => {\n      if (!roadview) return\n\n      const prevViewpoint = roadview.getViewpoint()\n\n      if (prevViewpoint.pan === pan && prevViewpoint.tilt === tilt) return\n\n      if (pan) prevViewpoint.pan = pan\n      if (tilt) prevViewpoint.tilt = tilt\n      roadview.setViewpoint(prevViewpoint)\n    }, [roadview, pan, tilt])\n\n    useKakaoEvent(roadview, \"init\", (target) => {\n      setIsLoading(false)\n      if (onInit) onInit(target)\n    })\n    useKakaoEvent(roadview, \"panoid_changed\", onPanoidChange)\n    useKakaoEvent(roadview, \"viewpoint_changed\", onViewpointChange)\n    useKakaoEvent(roadview, \"position_changed\", onPositionChanged)\n\n    return (\n      <>\n        <Container\n          ref={container}\n          id={id || \"react-kakao-maps-sdk-roadview-container\"}\n          {...props}\n        />\n        {roadview && !isLoading && (\n          <KakaoRoadviewContext.Provider value={roadview}>\n            {children}\n          </KakaoRoadviewContext.Provider>\n        )}\n      </>\n    )\n  }\n)\n\nexport default Roadview\n","import { useContext } from \"react\"\nimport { KakaoRoadviewContext } from \"../components/Roadview\"\n\n/**\n * kakao roadview 객체를 가져오는 hook 입니다.\n * Roadview 객체 내부가 아니라면 Error를 발생 시킵니다.\n */\nconst useRoadview = (componentName?: string) => {\n  const kakaoRoadview = useContext(KakaoRoadviewContext)\n  if (!kakaoRoadview) {\n    throw new Error(\n      `${\n        componentName ? componentName + \" Component\" : \"useRoadview\"\n      } must exist inside Roadview Component!`\n    )\n  }\n\n  return kakaoRoadview\n}\n\nexport default useRoadview\n","import React, {\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n} from \"react\"\nimport ReactDOM from \"react-dom\"\nimport useRoadview from \"../hooks/useRoadview\"\n\nexport interface CustomOverlayRoadviewProps {\n  /**\n   * 커스텀 오버레이의 좌표\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n  /**\n   * true 로 설정하면 컨텐츠 영역을 클릭했을 경우 지도 이벤트를 막아준다.\n   */\n  clickable?: boolean\n\n  /**\n   * 컨텐츠의 x축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  xAnchor?: number\n\n  /**\n   * 컨텐츠의 y축 위치. 0_1 사이의 값을 가진다. 기본값은 0.5\n   */\n  yAnchor?: number\n\n  /**\n   * 커스텀 오버레이의 z-index\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰상에서 커스텀 오버레이의 높이(위치)를 지정한다.\n   * 단위는 m(미터)이며 현재 로드뷰의 바닥 높이를 기준으로 떨어져있는 높이를 말한다.\n   */\n  altitude?: number\n\n  /**\n   * 커스텀 오버레이의 가시반경을 설정한다.\n   * 로드뷰의 위치와 커스텀 오버레이의 위치 사이의 거리가 가시반경 이내일 경우에만 로드뷰상에 노출된다.\n   * 단위는 m(미터)이며 기본값은 500m이다.\n   */\n  range?: number\n\n  /**\n   * 커스텀 오버레이를 생성 후 해당 객체를 가지고 callback 함수를 실행 시켜줌\n   */\n  onCreate?: (customOverlay: kakao.maps.CustomOverlay) => void\n}\n\n/**\n * Roadview에 CustomOverlay를 올릴 때 사용하는 컴포넌트 입니다.\n * `onCreate` 이벤트 또는 `ref` 객체를 통해서 `CustomOverlay` 객체에 직접 접근 및 초기 설정 작업을 지정할 수 있습니다.\n */\nconst CustomOverlayRoadview = React.forwardRef<\n  kakao.maps.CustomOverlay,\n  React.PropsWithChildren<CustomOverlayRoadviewProps>\n>(\n  (\n    {\n      position,\n      children,\n      clickable,\n      xAnchor,\n      yAnchor,\n      zIndex,\n      altitude,\n      range,\n      onCreate,\n    },\n    ref\n  ) => {\n    const roadview = useRoadview(`CustomOverlayRoadview`)\n    const container = useRef(document.createElement(\"div\"))\n\n    const overlayPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      return new kakao.maps.Viewpoint(\n        position.pan,\n        position.tilt,\n        position.zoom,\n        position.panoId\n      )\n      /* eslint-disable react-hooks/exhaustive-deps */\n    }, [\n      // @ts-ignore\n      position.lat,\n      // @ts-ignore\n      position.lng,\n      // @ts-ignore\n      position.pan,\n      // @ts-ignore\n      position.tilt,\n      // @ts-ignore\n      position.zoom,\n      // @ts-ignore\n      position.panoId,\n    ])\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    const overlay = useMemo(() => {\n      const KakaoCustomOverlay = new kakao.maps.CustomOverlay({\n        clickable: clickable,\n        xAnchor: xAnchor,\n        yAnchor: yAnchor,\n        zIndex: zIndex,\n        position: overlayPosition,\n        content: container.current,\n      })\n      container.current.style.display = \"none\"\n      return KakaoCustomOverlay\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [clickable, xAnchor, yAnchor])\n\n    useImperativeHandle(ref, () => overlay, [overlay])\n\n    useLayoutEffect(() => {\n      if (!roadview) return\n\n      overlay.setMap(roadview)\n\n      return () => {\n        overlay.setMap(null)\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [overlay, roadview])\n\n    useLayoutEffect(() => {\n      if (onCreate) onCreate(overlay)\n    }, [overlay, onCreate])\n\n    useLayoutEffect(() => {\n      overlay.setPosition(overlayPosition)\n    }, [overlay, overlayPosition])\n\n    useLayoutEffect(() => {\n      if (!zIndex) return\n      overlay.setZIndex(zIndex)\n    }, [overlay, zIndex])\n\n    useLayoutEffect(() => {\n      if (!altitude) return\n      overlay.setAltitude(altitude)\n    }, [overlay, altitude])\n\n    useLayoutEffect(() => {\n      if (!range) return\n      overlay.setRange(range)\n    }, [overlay, range])\n\n    return (\n      container.current.parentElement &&\n      ReactDOM.createPortal(children, container.current.parentElement)\n    )\n  }\n)\n\nexport default CustomOverlayRoadview\n","import React, { useMemo } from \"react\"\nimport useRoadview from \"../hooks/useRoadview\"\nimport Marker from \"./Marker\"\n\nexport interface RoadviewMarkerProps {\n  /**\n   * 표시 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        x: number\n        y: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n\n  image?: {\n    /**\n     * 표시 이미지 src\n     */\n    src: string\n\n    /**\n     * 표시 이미지 크기\n     */\n    size: {\n      width: number\n      height: number\n    }\n\n    options?: {\n      /**\n       * 마커 이미지의 alt 속성값을 정의한다.\n       */\n      alt?: string\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역을 표현하는 좌표값\n       */\n      coords?: string\n\n      /**\n       * 마커의 좌표에 일치시킬 이미지 안의 좌표 (기본값: 이미지의 가운데 아래)\n       */\n      offset?: { x: number; y: number }\n\n      /**\n       * 마커의 클릭 또는 마우스오버 가능한 영역의 모양\n       */\n      shape?: \"default\" | \"rect\" | \"circle\" | \"poly\"\n\n      /**\n       * 스프라이트 이미지 중 사용할 영역의 좌상단 좌표\n       */\n      spriteOrigin?: { x: number; y: number }\n\n      /**\n       * 스프라이트 이미지의 전체 크기\n       */\n      spriteSize?: { width: number; height: number }\n    }\n  }\n\n  /**\n   * click 이벤트 핸들러\n   */\n  onClick?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseover 이벤트 핸들러\n   */\n  onMouseOver?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * mouseout 이벤트 핸들러\n   */\n  onMouseOut?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragstart 이벤트 핸들러\n   */\n  onDragStart?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * dragend 이벤트 핸들러\n   */\n  onDragEnd?: (marker: kakao.maps.Marker) => void\n\n  /**\n   * Maker 생성 이벤트 핸들러\n   */\n  onCreate?: (maker: kakao.maps.Marker) => void\n\n  /**\n   * 마커 엘리먼트의 타이틀 속성 값 (툴팁)\n   */\n  title?: string\n\n  /**\n   * 클릭 가능한 마커\n   */\n  clickable?: boolean\n\n  /**\n   * 마커 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 마커 투명도 (0-1)\n   */\n  opacity?: number\n\n  /**\n   * 로드뷰에 올라있는 마커의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 마커의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 마커는 로드뷰에서 보이지 않게 된다.\n   */\n  range?: number\n\n  /**\n   * InfoWindow 옵션\n   */\n  infoWindowOptions?: {\n    /**\n     * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n     */\n    disableAutoPan?: boolean\n\n    /**\n     * 삭제 가능한 인포윈도우\n     */\n    removable?: boolean\n\n    /**\n     * 인포윈도우 엘리먼트의 z-index 속성 값\n     */\n    zIndex?: number\n  }\n}\n\n/**\n * Map에서 Marker를 생성할 때 사용 합니다.\n * `onCreate` 이벤트를 통해 생성 후 `maker` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst RoadviewMarker = React.forwardRef<\n  kakao.maps.Marker,\n  React.PropsWithChildren<RoadviewMarkerProps>\n>(\n  (\n    {\n      image,\n      position,\n      children,\n      altitude,\n      clickable,\n      infoWindowOptions,\n      onClick,\n      onDragEnd,\n      onDragStart,\n      onMouseOut,\n      onMouseOver,\n      onCreate,\n      opacity,\n      range,\n      title,\n      zIndex,\n    },\n    ref\n  ) => {\n    const roadview = useRoadview(`RoadviewMarker`)\n\n    const markerImage = useMemo(() => {\n      return (\n        image &&\n        new kakao.maps.MarkerImage(\n          image.src,\n          new kakao.maps.Size(image.size.width, image.size.height),\n          {\n            alt: image.options?.alt,\n            coords: image.options?.coords,\n            offset:\n              image.options?.offset &&\n              new kakao.maps.Point(\n                image.options?.offset.x,\n                image.options?.offset.y\n              ),\n            shape: image.options?.shape,\n            spriteOrigin:\n              image.options?.spriteOrigin &&\n              new kakao.maps.Point(\n                image.options?.spriteOrigin.x,\n                image.options?.spriteOrigin.y\n              ),\n            spriteSize:\n              image.options?.spriteSize &&\n              new kakao.maps.Size(\n                image.options?.spriteSize.width,\n                image.options?.spriteSize.height\n              ),\n          }\n        )\n      )\n    }, [image])\n\n    const markerPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      if (\"x\" in position) {\n        return new kakao.maps.Coords(position.x, position.y).toLatLng()\n      }\n      return new kakao.maps.Viewpoint(\n        position.pan,\n        position.tilt,\n        position.zoom,\n        position.panoId\n      )\n\n      /* eslint-disable react-hooks/exhaustive-deps */\n    }, [\n      // @ts-ignore\n      position.lat,\n      // @ts-ignore\n      position.lng,\n      // @ts-ignore\n      position.x,\n      // @ts-ignore\n      position.y,\n      // @ts-ignore\n      position.pan,\n      // @ts-ignore\n      position.tilt,\n      // @ts-ignore\n      position.zoom,\n      // @ts-ignore\n      position?.panoId,\n    ])\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    return (\n      <Marker\n        map={roadview}\n        position={markerPosition}\n        image={markerImage}\n        altitude={altitude}\n        clickable={clickable}\n        infoWindowOptions={infoWindowOptions}\n        onClick={onClick}\n        onDragEnd={onDragEnd}\n        onDragStart={onDragStart}\n        onMouseOut={onMouseOut}\n        onMouseOver={onMouseOver}\n        onCreate={onCreate}\n        opacity={opacity}\n        range={range}\n        title={title}\n        zIndex={zIndex}\n        ref={ref}\n      >\n        {children}\n      </Marker>\n    )\n  }\n)\n\nexport default RoadviewMarker\n","import React, { useMemo } from \"react\"\nimport InfoWindow from \"./InfoWindow\"\nimport useRoadview from \"../hooks/useRoadview\"\n\nexport interface RoadviewInfoWindowProps {\n  /**\n   * 인포윈도가 표시될 위치\n   */\n  position:\n    | {\n        lat: number\n        lng: number\n      }\n    | {\n        /**\n         * 가로 각도, 0부터 360 사이의 값으로 북쪽부터 시계방향으로 대응한다.\n         */\n        pan: number\n        /**\n         * 세로 각도, -90부터 90 사이의 값으로 위쪽부터 아래쪽으로 대응한다.\n         */\n        tilt: number\n        /**\n         * 확대 수준, -3부터 3 사이의 정수이다.\n         */\n        zoom?: number\n        /**\n         * 특정 위치의 로드뷰 고유의 아이디 값\n         */\n        panoId?: number\n      }\n\n  /**\n   * 인포윈도우를 열 때 지도가 자동으로 패닝하지 않을지의 여부 (기본값: false)\n   */\n  disableAutoPan?: boolean\n\n  /**\n   * 삭제 가능한 인포윈도우\n   */\n  removable?: boolean\n\n  /**\n   * 인포윈도우 엘리먼트의 z-index 속성 값\n   */\n  zIndex?: number\n\n  /**\n   * 로드뷰에 올라있는 인포윈도우의 높이 값(m 단위)\n   */\n  altitude?: number\n\n  /**\n   * 로드뷰 상에서 인포윈도우의 가시반경(m 단위), 두 지점 사이의 거리가 지정한 값보다 멀어지면 인포윈도우는 보이지 않게 된다\n   */\n  range?: number\n\n  /**\n   * 인포윈도우 객체 생성후 해당 객체를 반환하는 함수\n   */\n  onCreate?: (infoWindow: kakao.maps.InfoWindow) => void\n}\n\n/**\n * Map 컴포넌트에서 InfoWindow를 그릴 때 사용됩니다.\n * `onCreate` 이벤트를 통해 생성 후 `infoWindow` 객체에 직접 접근하여 초기 설정이 가능합니다.\n */\nconst RoadviewInfoWindow = React.forwardRef<\n  kakao.maps.InfoWindow,\n  React.PropsWithChildren<RoadviewInfoWindowProps>\n>(\n  (\n    {\n      position,\n      children,\n      altitude,\n      disableAutoPan,\n      range,\n      removable,\n      zIndex,\n      onCreate,\n    },\n    ref\n  ) => {\n    const roadview = useRoadview(`RoadviewInfoWindow`)\n    const infoPosition = useMemo(() => {\n      if (\"lat\" in position) {\n        return new kakao.maps.LatLng(position.lat, position.lng)\n      }\n      return new kakao.maps.Viewpoint(\n        position.pan,\n        position.tilt,\n        position.zoom,\n        position.panoId\n      )\n      /* eslint-disable react-hooks/exhaustive-deps */\n    }, [\n      // @ts-ignore\n      position.lat,\n      // @ts-ignore\n      position.lng,\n      // @ts-ignore\n      position.pan,\n      // @ts-ignore\n      position.tilt,\n      // @ts-ignore\n      position.zoom,\n      // @ts-ignore\n      position.panoId,\n    ])\n    /* eslint-enable react-hooks/exhaustive-deps */\n\n    return (\n      <InfoWindow\n        altitude={altitude}\n        disableAutoPan={disableAutoPan}\n        range={range}\n        removable={removable}\n        zIndex={zIndex}\n        map={roadview}\n        position={infoPosition}\n        onCreate={onCreate}\n        ref={ref}\n      >\n        {children}\n      </InfoWindow>\n    )\n  }\n)\n\nexport default RoadviewInfoWindow\n","import React, {\n  ReactNode,\n  Ref,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n} from \"react\"\nimport useMap from \"../hooks/useMap\"\n\nexport const DrawingManagerContext =\n  React.createContext<kakao.maps.drawing.DrawingManager>(\n    undefined as unknown as kakao.maps.drawing.DrawingManager\n  )\n\nexport type DrawingManagerProps<\n  T extends kakao.maps.drawing.OverlayType = kakao.maps.drawing.OverlayType\n> = Partial<kakao.maps.drawing.OverlayOptions> &\n  Pick<kakao.maps.drawing.OverlayOptions, `${T}Options`> & {\n    /**\n     * 마우스 오버 시 가이드 툴팁 표시 여부. ‘draw’, ‘drag’, ‘edit’ 3가지를 지정할 수 있다 (기본값: 모두 표시 안함)\n     * 예를들어 [‘draw’]로 설정하면 객체를 그릴때 가이드 툴팁이 표시된다\n     */\n    guideTooltip?: Array<\"draw\" | \"drag\" | \"edit\">\n    /**\n     * 사용할 그리기 요소 지정한다 (기본값: 모든 그리기 요소)\n     */\n    drawingMode?: Array<T | `${T}`>\n\n    /**\n     * 그리기 요소를 선택하면 발생한다.\n     */\n    onSelect?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기를 시작하면 발생한다.\n     */\n    onDrawstart?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기 시작 후, 마우스를 이동하면 발생한다.\n     */\n    onDraw?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기를 시작하면 발생한다.\n     */\n    onDrawend?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 다음 단계 그리기를 하면 발생한다. (Polyline, Polygon, Arrow 한정)\n     */\n    onDrawnext?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기를 취소하면 발생한다.\n     */\n    onCancle?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기 요소를 삭제하면 발생한다.\n     */\n    onRemove?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>,\n      event: kakao.maps.drawing.MouseEvent\n    ) => void\n\n    /**\n     * 그리기 요소들의 상태가 변경되면 발생한다.\n     * 각 요소의 생성/수정/이동/삭제 동작과 undo 또는 redo 함수 호출이 이에 해당한다.\n     */\n    onStateChanged?: (\n      drawingManager: kakao.maps.drawing.DrawingManager<T>\n    ) => void\n\n    /**\n     * 객체 생성후 해당 이벤트가 발생합니다.\n     */\n    onCreate?: (drawingManager: kakao.maps.drawing.DrawingManager<T>) => void\n\n    /**\n     * Toolbox에 대해서 추가할 때 사용합니다.\n     */\n    children?: ReactNode\n  }\n\nfunction useDrawingManagerEvent<T extends kakao.maps.drawing.OverlayType>(\n  target: kakao.maps.drawing.DrawingManager<T> | undefined,\n  type:\n    | \"drawstart\"\n    | \"draw\"\n    | \"drawend\"\n    | \"drawnext\"\n    | \"select\"\n    | \"cancel\"\n    | \"remove\"\n    | \"state_changed\",\n  callback:\n    | ((target: kakao.maps.drawing.DrawingManager<T>, ...args: any) => void)\n    | undefined\n) {\n  useLayoutEffect(() => {\n    if (!target || !callback) return\n\n    const wrapCallback = (...arg: any[]) => {\n      if (arg === undefined) return callback(target)\n      else return callback(target, ...arg)\n    }\n\n    // @ts-ignore\n    target.addListener(type, wrapCallback)\n  }, [callback, target, type])\n}\n\n/**\n * 그리기 관리자 객체를 생성하는 컴포넌트 입니다.\n *\n * 초기 생성자에 필요한 Props는 최초 렌더링에만 반영을 하고 이후에는 값이 변경되더라도 적용되지 않습니다.\n *\n * > `on~` 시리즈를 제외한 props는 초기 렌더링 이후 작동 안함\n *\n * DrawingManager는 이전 Map, Marker, CustomOverlay와 달리 Props를 통해 제어를 하는 것이 아닌 직접 DrawingManager 객체를 이용하여 제어를 해야 합니다.\n *\n * 이를 위해 ref 객체를 통해 `DrawingManager` 객체를 접근 할 수 있으며, 이를 활용하여 여러 이벤트 처리 및 제어가 가능합니다.\n *\n * TypeScript 사용자를 위한 `Generic`이 적용되어 있으므로, `ref` 객체에 대한 typing 및 `drawingMode`에 대해 확실하게 정의해야 합니다.\n *\n * ```tsx\n * const Main = () => {\n *     const managerRef = useRef<kakao.maps.drawing.DrawingManager<\n *       kakao.maps.drawing.OverlayType.POLYLINE\n *     >>(null);\n *\n *     function selectOverlay(type: string) {\n *       const manager = managerRef.current;\n *       manager.cancel();\n *       manager.select(kakao.maps.drawing.OverlayType.POLYLINE);\n *     }\n *\n *     return (\n *       <>\n *         <Map\n *           center={{\n *             // 지도의 중심좌표\n *             lat: 33.450701,\n *             lng: 126.570667,\n *           }}\n *           style={{\n *             width: \"100%\",\n *             height: \"450px\",\n *           }}\n *           level={3} // 지도의 확대 레벨\n *         >\n *           <DrawingManager\n *             ref={managerRef}\n *             drawingMode={[\n *               kakao.maps.drawing.OverlayType.POLYLINE,\n *             ]}\n *             guideTooltip={['draw', 'drag', 'edit']}\n *             polylineOptions={{\n *               draggable: true,\n *               removable: true,\n *               editable: true\n *             }}\n *           />\n *         </Map>\n *         <button onClick={(e) => {\n *           selectOverlay('POLYLINE')\n *         }}>선</button>\n *       </>\n *     )\n *   }\n * ```\n *\n * > JavaScript 코드 버전\n *\n * ```jsx live\n * function() {\n *   const Main = () => {\n *     const managerRef = useRef(null);\n *\n *     function selectOverlay() {\n *       const manager = managerRef.current;\n *       manager.cancel();\n *       manager.select(kakao.maps.drawing.OverlayType.POLYLINE);\n *     }\n *\n *     return (\n *       <>\n *         <Map\n *           center={{\n *             // 지도의 중심좌표\n *             lat: 33.450701,\n *             lng: 126.570667,\n *           }}\n *           style={{\n *             width: \"100%\",\n *             height: \"450px\",\n *           }}\n *           level={3} // 지도의 확대 레벨\n *         >\n *           <DrawingManager\n *             ref={managerRef}\n *             drawingMode={[\n *               kakao.maps.drawing.OverlayType.POLYLINE,\n *             ]}\n *             guideTooltip={['draw', 'drag', 'edit']}\n *             polylineOptions={{\n *               draggable: true,\n *               removable: true,\n *               editable: true\n *             }}\n *           />\n *         </Map>\n *         <button onClick={selectOverlay}>선</button>\n *       </>\n *     )\n *   }\n *   return (<Main />)\n * }\n * ```\n */\nconst DrawingManager = React.forwardRef(function <\n  T extends kakao.maps.drawing.OverlayType\n>(\n  {\n    arrowOptions,\n    circleOptions,\n    ellipseOptions,\n    markerOptions,\n    polygonOptions,\n    polylineOptions,\n    rectangleOptions,\n    drawingMode,\n    guideTooltip,\n    onSelect,\n    onDrawstart,\n    onDraw,\n    onDrawend,\n    onDrawnext,\n    onCancle,\n    onRemove,\n    onStateChanged,\n    onCreate,\n    children,\n  }: DrawingManagerProps<T>,\n  ref: Ref<kakao.maps.drawing.DrawingManager<T>>\n) {\n  const map = useMap(\"Toolbox\")\n\n  const drawingManager = useMemo(\n    () => {\n      if (!window.kakao.maps.drawing) {\n        console.warn(\n          \"drawing 라이브러리를 별도 로드 해야 사용 가능합니다. `https://apis.map.kakao.com/web/guide/#loadlibrary`\"\n        )\n        return\n      }\n\n      return new kakao.maps.drawing.DrawingManager<T>({\n        // @ts-ignore\n        map,\n        drawingMode,\n        guideTooltip,\n        arrowOptions,\n        circleOptions,\n        ellipseOptions,\n        markerOptions,\n        polygonOptions,\n        polylineOptions,\n        rectangleOptions,\n      })\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  )\n  useImperativeHandle(ref, () => drawingManager!, [drawingManager])\n\n  useLayoutEffect(() => {\n    drawingManager && onCreate && onCreate(drawingManager)\n  }, [drawingManager, onCreate])\n\n  useDrawingManagerEvent(drawingManager, \"select\", onSelect)\n  useDrawingManagerEvent(drawingManager, \"drawstart\", onDrawstart)\n  useDrawingManagerEvent(drawingManager, \"draw\", onDraw)\n  useDrawingManagerEvent(drawingManager, \"drawend\", onDrawend)\n  useDrawingManagerEvent(drawingManager, \"drawnext\", onDrawnext)\n  useDrawingManagerEvent(drawingManager, \"cancel\", onCancle)\n  useDrawingManagerEvent(drawingManager, \"remove\", onRemove)\n  useDrawingManagerEvent(drawingManager, \"state_changed\", onStateChanged)\n\n  if (!drawingManager) return null\n\n  return (\n    <DrawingManagerContext.Provider value={drawingManager}>\n      {children}\n    </DrawingManagerContext.Provider>\n  )\n}) as unknown as <\n  T extends kakao.maps.drawing.OverlayType = kakao.maps.drawing.OverlayType\n>(\n  _props: DrawingManagerProps<T> &\n    React.RefAttributes<kakao.maps.drawing.DrawingManager<T>>\n) => null\n\nexport default DrawingManager\n","import React, {\n  Ref,\n  useContext,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n} from \"react\"\nimport useMap from \"../hooks/useMap\"\nimport { DrawingManagerContext } from \"./DrawingManager\"\n\nexport type ToolboxProps = {\n  /**\n   * Toolbox의 Position를 정의 한다.\n   */\n  position?: kakao.maps.ControlPosition\n}\n\n/**\n * 그리기 툴박스를 생성합니다.\n *\n * 해당 컴포넌트는 반드시 `DrawingManager` 컴포넌트의 자식으로 존재해야 합니다.\n */\nconst Toolbox = React.forwardRef(function (\n  { position }: ToolboxProps,\n  ref: Ref<kakao.maps.drawing.Toolbox>\n) {\n  position = position || kakao.maps.ControlPosition.TOP\n\n  const map = useMap(\"Toolbox\")\n  const drawingmanager = useContext(DrawingManagerContext)\n\n  if (!drawingmanager) {\n    throw new Error(\"Toolbox must exist inside DrawingManager Component!`\")\n  }\n\n  const toolbox = useMemo(\n    () =>\n      new kakao.maps.drawing.Toolbox({\n        drawingManager: drawingmanager,\n      }),\n    [drawingmanager]\n  )\n  useImperativeHandle(ref, () => toolbox, [toolbox])\n\n  useLayoutEffect(() => {\n    const element = toolbox.getElement()\n    map.addControl(element, position!)\n    return () => {\n      map.removeControl(element)\n    }\n  }, [map, toolbox, position])\n\n  return null\n})\n\nexport default Toolbox\n","import React, { useRef, useState, useImperativeHandle } from \"react\"\nimport useIsomorphicLayoutEffect from \"../hooks/useIsomorphicLayoutEffect\"\n\nexport interface StaticMapProps {\n  /**\n   * MapContinaer의 id에 대해서 지정합니다.\n   */\n  id?: string\n\n  /**\n   * MapContainer의 className에 대해서 지정합니다.\n   */\n  className?: string\n\n  /**\n   * MapContainer의 style에 대해서 지정합니다.\n   */\n  style?: React.CSSProperties\n\n  /**\n   * 중심으로 설정할 위치 입니다.\n   */\n  center: {\n    lat: number\n    lng: number\n  }\n\n  /**\n   * 확대 수준\n   * @default 3\n   */\n  level?: number\n\n  /**\n   * 지도 종류 (기본값: 일반 지도)\n   */\n  mapTypeId?: kakao.maps.MapTypeId\n\n  /**\n   * 이미지 지도에 표시할 마커 또는 마커 배열\n   */\n  marker:\n    | boolean\n    | {\n        /**\n         * 마커 tooltip에 표시될 내용\n         */\n        text?: string\n        /**\n         * 마커 포지션\n         */\n        position?: {\n          lat: number\n          lng: number\n        }\n      }\n    | Array<{\n        /**\n         * 마커 tooltip에 표시될 내용\n         */\n        text?: string\n        /**\n         * 마커 포지션\n         */\n        position: {\n          lat: number\n          lng: number\n        }\n      }>\n  /**\n   * StaticMap 생성 이벤트 핸들러\n   */\n  onCreate?: (maker: kakao.maps.StaticMap) => void\n}\n\nconst StaticMap = React.forwardRef<kakao.maps.StaticMap, StaticMapProps>(\n  (\n    {\n      id = \"react-kakao-maps-sdk-staticmap-container\",\n      style,\n      className,\n      center,\n      marker,\n      level,\n      mapTypeId,\n      onCreate,\n    },\n    ref\n  ) => {\n    const [map, setMap] = useState<kakao.maps.StaticMap>()\n    const container = useRef<HTMLDivElement>(null)\n\n    useIsomorphicLayoutEffect(() => {\n      if (!window.kakao) {\n        console.warn(\n          \"kakao map javascript api를 먼저 불러와야 합니다. `https://apis.map.kakao.com/web/guide`\"\n        )\n        return\n      }\n\n      const mapContainer = container.current\n      if (!mapContainer) return\n\n      kakao.maps.load(() => {\n        const _marker = (() => {\n          if (Array.isArray(marker)) {\n            return marker.map((mk) => {\n              return {\n                ...mk,\n                position: new kakao.maps.LatLng(\n                  mk.position.lat,\n                  mk.position.lng\n                ),\n              }\n            })\n          }\n          if (typeof marker === \"object\") {\n            if (!!marker.position) {\n              return {\n                ...marker,\n                position: new kakao.maps.LatLng(\n                  marker.position.lat,\n                  marker.position.lng\n                ),\n              }\n            }\n            return marker as { text: string }\n          }\n          return marker\n        })()\n        const kakaoStaticMap = new kakao.maps.StaticMap(mapContainer, {\n          center: new kakao.maps.LatLng(center.lat, center.lng),\n          level,\n          mapTypeId,\n          marker: _marker,\n        })\n\n        setMap(kakaoStaticMap)\n      })\n    }, [JSON.stringify(marker)])\n\n    useImperativeHandle(ref, () => map!, [map])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map) map.setCenter(new kakao.maps.LatLng(center.lat, center.lng))\n    }, [map, center.lat, center.lng])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map && level) map.setLevel(level)\n    }, [map, level])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map && mapTypeId) map.setMapTypeId(mapTypeId)\n    }, [map, mapTypeId])\n\n    useIsomorphicLayoutEffect(() => {\n      if (map && onCreate) onCreate(map)\n    }, [map, onCreate])\n\n    return (\n      <div id={id} style={style} className={className} ref={container}></div>\n    )\n  }\n)\n\nexport default StaticMap\n","import { useEffect, useMemo, useState } from \"react\"\nimport { Loader, LoaderOptions } from \"../util/kakaoMapApiLoader\"\n\n/**\n * Kakao Map Api를 injection 합니다.\n *\n * 해당 hook은 cleanup 시점에도 Kakao Map Api를 제거 하지 않고, 동일한 hook를 여러 위치에서 호출 하더라도 최초 한번만 injection 됩니다.\n */\nconst useInjectKakaoMapApi = (options: LoaderOptions) => {\n  const [state, setState] = useState<{\n    loading: boolean\n    error: ErrorEvent | undefined\n  }>({\n    loading: true,\n    error: undefined,\n  })\n\n  const loader = useMemo(\n    () => new Loader(options),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [JSON.stringify(options)]\n  )\n\n  useEffect(() => {\n    loader\n      .load()\n      .then(() =>\n        setState({\n          loading: false,\n          error: undefined,\n        })\n      )\n      .catch((error) =>\n        setState({\n          loading: false,\n          error: error,\n        })\n      )\n  }, [loader])\n\n  return state\n}\n\nexport default useInjectKakaoMapApi\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}